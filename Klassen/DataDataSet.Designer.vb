'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.40607.85
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DataDataSet")>  _
Partial Public Class DataDataSet
    Inherits System.Data.DataSet
    
    Private tableKontakte As KontakteDataTable
    
    Private tableAutoren As AutorenDataTable
    
    Private tableAdressen As AdressenDataTable
    
    Private tableKontaktArten As KontaktArtenDataTable
    
    Private tableAdressArten As AdressArtenDataTable
    
    Private relationKontaktArtenKontakte As System.Data.DataRelation
    
    Private relationAutorenKontakte As System.Data.DataRelation
    
    Private relationAdressArtenAdressen As System.Data.DataRelation
    
    Private relationAutorenAdressen As System.Data.DataRelation
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Kontakte")) Is Nothing) Then
                MyBase.Tables.Add(New KontakteDataTable(ds.Tables("Kontakte")))
            End If
            If (Not (ds.Tables("Autoren")) Is Nothing) Then
                MyBase.Tables.Add(New AutorenDataTable(ds.Tables("Autoren")))
            End If
            If (Not (ds.Tables("Adressen")) Is Nothing) Then
                MyBase.Tables.Add(New AdressenDataTable(ds.Tables("Adressen")))
            End If
            If (Not (ds.Tables("KontaktArten")) Is Nothing) Then
                MyBase.Tables.Add(New KontaktArtenDataTable(ds.Tables("KontaktArten")))
            End If
            If (Not (ds.Tables("AdressArten")) Is Nothing) Then
                MyBase.Tables.Add(New AdressArtenDataTable(ds.Tables("AdressArten")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Kontakte() As KontakteDataTable
        Get
            Return Me.tableKontakte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Autoren() As AutorenDataTable
        Get
            Return Me.tableAutoren
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adressen() As AdressenDataTable
        Get
            Return Me.tableAdressen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property KontaktArten() As KontaktArtenDataTable
        Get
            Return Me.tableKontaktArten
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdressArten() As AdressArtenDataTable
        Get
            Return Me.tableAdressArten
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(false)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DataDataSet = CType(MyBase.Clone,DataDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Kontakte")) Is Nothing) Then
            MyBase.Tables.Add(New KontakteDataTable(ds.Tables("Kontakte")))
        End If
        If (Not (ds.Tables("Autoren")) Is Nothing) Then
            MyBase.Tables.Add(New AutorenDataTable(ds.Tables("Autoren")))
        End If
        If (Not (ds.Tables("Adressen")) Is Nothing) Then
            MyBase.Tables.Add(New AdressenDataTable(ds.Tables("Adressen")))
        End If
        If (Not (ds.Tables("KontaktArten")) Is Nothing) Then
            MyBase.Tables.Add(New KontaktArtenDataTable(ds.Tables("KontaktArten")))
        End If
        If (Not (ds.Tables("AdressArten")) Is Nothing) Then
            MyBase.Tables.Add(New AdressArtenDataTable(ds.Tables("AdressArten")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableKontakte = CType(MyBase.Tables("Kontakte"),KontakteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKontakte) Is Nothing) Then
                Me.tableKontakte.InitVars
            End If
        End If
        Me.tableAutoren = CType(MyBase.Tables("Autoren"),AutorenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAutoren) Is Nothing) Then
                Me.tableAutoren.InitVars
            End If
        End If
        Me.tableAdressen = CType(MyBase.Tables("Adressen"),AdressenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdressen) Is Nothing) Then
                Me.tableAdressen.InitVars
            End If
        End If
        Me.tableKontaktArten = CType(MyBase.Tables("KontaktArten"),KontaktArtenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKontaktArten) Is Nothing) Then
                Me.tableKontaktArten.InitVars
            End If
        End If
        Me.tableAdressArten = CType(MyBase.Tables("AdressArten"),AdressArtenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdressArten) Is Nothing) Then
                Me.tableAdressArten.InitVars
            End If
        End If
        Me.relationKontaktArtenKontakte = Me.Relations("KontaktArtenKontakte")
        Me.relationAutorenKontakte = Me.Relations("AutorenKontakte")
        Me.relationAdressArtenAdressen = Me.Relations("AdressArtenAdressen")
        Me.relationAutorenAdressen = Me.Relations("AutorenAdressen")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-DE")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableKontakte = New KontakteDataTable
        MyBase.Tables.Add(Me.tableKontakte)
        Me.tableAutoren = New AutorenDataTable
        MyBase.Tables.Add(Me.tableAutoren)
        Me.tableAdressen = New AdressenDataTable
        MyBase.Tables.Add(Me.tableAdressen)
        Me.tableKontaktArten = New KontaktArtenDataTable
        MyBase.Tables.Add(Me.tableKontaktArten)
        Me.tableAdressArten = New AdressArtenDataTable
        MyBase.Tables.Add(Me.tableAdressArten)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("KontaktArtenKontakte", New System.Data.DataColumn() {Me.tableKontaktArten.UIDColumn}, New System.Data.DataColumn() {Me.tableKontakte.KontaktArt_UIDColumn})
        Me.tableKontakte.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("AutorenKontakte", New System.Data.DataColumn() {Me.tableAutoren.UIDColumn}, New System.Data.DataColumn() {Me.tableKontakte.Autor_UIDColumn})
        Me.tableKontakte.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("AdressArtenAdressen", New System.Data.DataColumn() {Me.tableAdressArten.UIDColumn}, New System.Data.DataColumn() {Me.tableAdressen.AdressArt_UIDColumn})
        Me.tableAdressen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("AutorenAdressen", New System.Data.DataColumn() {Me.tableAutoren.UIDColumn}, New System.Data.DataColumn() {Me.tableAdressen.Author_UIDColumn})
        Me.tableAdressen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationKontaktArtenKontakte = New System.Data.DataRelation("KontaktArtenKontakte", New System.Data.DataColumn() {Me.tableKontaktArten.UIDColumn}, New System.Data.DataColumn() {Me.tableKontakte.KontaktArt_UIDColumn}, false)
        Me.Relations.Add(Me.relationKontaktArtenKontakte)
        Me.relationAutorenKontakte = New System.Data.DataRelation("AutorenKontakte", New System.Data.DataColumn() {Me.tableAutoren.UIDColumn}, New System.Data.DataColumn() {Me.tableKontakte.Autor_UIDColumn}, false)
        Me.Relations.Add(Me.relationAutorenKontakte)
        Me.relationAdressArtenAdressen = New System.Data.DataRelation("AdressArtenAdressen", New System.Data.DataColumn() {Me.tableAdressArten.UIDColumn}, New System.Data.DataColumn() {Me.tableAdressen.AdressArt_UIDColumn}, false)
        Me.Relations.Add(Me.relationAdressArtenAdressen)
        Me.relationAutorenAdressen = New System.Data.DataRelation("AutorenAdressen", New System.Data.DataColumn() {Me.tableAutoren.UIDColumn}, New System.Data.DataColumn() {Me.tableAdressen.Author_UIDColumn}, false)
        Me.Relations.Add(Me.relationAutorenAdressen)
        Me.ExtendedProperties.Add("DSGenerator_DataSetName", "DataDataSet")
        Me.ExtendedProperties.Add("User_DataSetName", "DataDataSet")
    End Sub
    
    Private Function ShouldSerializeKontakte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoren() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdressen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeKontaktArten() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdressArten() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataDataSet = New DataDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        If PublishLegacyWSDL Then
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
        Else
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(0)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            sequence.MaxOccurs = Decimal.MaxValue
            Dim attribute As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute.Name = "namespace"
            attribute.FixedValue = ds.Namespace
            type.Attributes.Add(attribute)
        End If
        type.Particle = sequence
        Return type
    End Function
    
    Protected Shared Function PublishLegacyWSDL() As Boolean
        Dim settings As System.Collections.Specialized.NameValueCollection = CType(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset"),System.Collections.Specialized.NameValueCollection)
        If (Not (settings) Is Nothing) Then
            Dim values() As String = settings.GetValues("WSDL_VERSION")
            If (Not (values) Is Nothing) Then
                Dim version As Single = Single.Parse(CType(values(0),String), CType(Nothing,System.IFormatProvider))
                Return (version < 2)
            End If
        End If
        Return true
    End Function
    
    Public Delegate Sub KontakteRowChangeEventHandler(ByVal sender As Object, ByVal e As KontakteRowChangeEvent)
    
    Public Delegate Sub AutorenRowChangeEventHandler(ByVal sender As Object, ByVal e As AutorenRowChangeEvent)
    
    Public Delegate Sub AdressenRowChangeEventHandler(ByVal sender As Object, ByVal e As AdressenRowChangeEvent)
    
    Public Delegate Sub KontaktArtenRowChangeEventHandler(ByVal sender As Object, ByVal e As KontaktArtenRowChangeEvent)
    
    Public Delegate Sub AdressArtenRowChangeEventHandler(ByVal sender As Object, ByVal e As AdressArtenRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KontakteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUID As System.Data.DataColumn
        
        Private columnAutor_UID As System.Data.DataColumn
        
        Private columnKontaktDaten As System.Data.DataColumn
        
        Private columnKontaktArt_UID As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Kontakte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUID
            End Get
        End Property
        
        Friend ReadOnly Property Autor_UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAutor_UID
            End Get
        End Property
        
        Friend ReadOnly Property KontaktDatenColumn() As System.Data.DataColumn
            Get
                Return Me.columnKontaktDaten
            End Get
        End Property
        
        Friend ReadOnly Property KontaktArt_UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnKontaktArt_UID
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As KontakteRow
            Get
                Return CType(Me.Rows(index),KontakteRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event UIDChanging As UIDChangeEventHandler
        
        Public Event UIDChanged As UIDChangeEventHandler
        
        Public Event Autor_UIDChanging As Autor_UIDChangeEventHandler
        
        Public Event Autor_UIDChanged As Autor_UIDChangeEventHandler
        
        Public Event KontaktDatenChanging As KontaktDatenChangeEventHandler
        
        Public Event KontaktDatenChanged As KontaktDatenChangeEventHandler
        
        Public Event KontaktArt_UIDChanging As KontaktArt_UIDChangeEventHandler
        
        Public Event KontaktArt_UIDChanged As KontaktArt_UIDChangeEventHandler
        
        Public Event KontakteRowChanged As KontakteRowChangeEventHandler
        
        Public Event KontakteRowChanging As KontakteRowChangeEventHandler
        
        Public Event KontakteRowDeleted As KontakteRowChangeEventHandler
        
        Public Event KontakteRowDeleting As KontakteRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangingEvent) Is Nothing) Then
                    RaiseEvent UIDChanging(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Autor_UID") Then
                    If (Not (Me.Autor_UIDChangingEvent) Is Nothing) Then
                        RaiseEvent Autor_UIDChanging(Me, New Autor_UIDChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "KontaktDaten") Then
                        If (Not (Me.KontaktDatenChangingEvent) Is Nothing) Then
                            RaiseEvent KontaktDatenChanging(Me, New KontaktDatenChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "KontaktArt_UID") Then
                            If (Not (Me.KontaktArt_UIDChangingEvent) Is Nothing) Then
                                RaiseEvent KontaktArt_UIDChanging(Me, New KontaktArt_UIDChangeEventArg(e))
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangedEvent) Is Nothing) Then
                    RaiseEvent UIDChanged(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Autor_UID") Then
                    If (Not (Me.Autor_UIDChangedEvent) Is Nothing) Then
                        RaiseEvent Autor_UIDChanged(Me, New Autor_UIDChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "KontaktDaten") Then
                        If (Not (Me.KontaktDatenChangedEvent) Is Nothing) Then
                            RaiseEvent KontaktDatenChanged(Me, New KontaktDatenChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "KontaktArt_UID") Then
                            If (Not (Me.KontaktArt_UIDChangedEvent) Is Nothing) Then
                                RaiseEvent KontaktArt_UIDChanged(Me, New KontaktArt_UIDChangeEventArg(e))
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddKontakteRow(ByVal row As KontakteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddKontakteRow(ByVal parentAutorenRowByAutorenKontakte As AutorenRow, ByVal KontaktDaten As String, ByVal parentKontaktArtenRowByKontaktArtenKontakte As KontaktArtenRow) As KontakteRow
            Dim rowKontakteRow As KontakteRow = CType(Me.NewRow,KontakteRow)
            rowKontakteRow.ItemArray = New Object() {Nothing, parentAutorenRowByAutorenKontakte(0), KontaktDaten, parentKontaktArtenRowByKontaktArtenKontakte(0)}
            Me.Rows.Add(rowKontakteRow)
            Return rowKontakteRow
        End Function
        
        Public Function FindByUID(ByVal UID As Integer) As KontakteRow
            Return CType(Me.Rows.Find(New Object() {UID}),KontakteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As KontakteDataTable = CType(MyBase.Clone,KontakteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New KontakteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUID = MyBase.Columns("UID")
            Me.columnAutor_UID = MyBase.Columns("Autor_UID")
            Me.columnKontaktDaten = MyBase.Columns("KontaktDaten")
            Me.columnKontaktArt_UID = MyBase.Columns("KontaktArt_UID")
        End Sub
        
        Private Sub InitClass()
            Me.columnUID = New System.Data.DataColumn("UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnUID.ExtendedProperties.Add("Generator_ChangedEventName", "UIDChanged")
            Me.columnUID.ExtendedProperties.Add("Generator_ChangingEventName", "UIDChanging")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UID")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UIDColumn")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUID")
            Me.columnUID.ExtendedProperties.Add("Generator_DelegateName", "UIDChangeEventHandler")
            Me.columnUID.ExtendedProperties.Add("Generator_EventArgName", "UIDChangeEventArg")
            Me.columnUID.ExtendedProperties.Add("User_ColumnName", "UID")
            MyBase.Columns.Add(Me.columnUID)
            Me.columnAutor_UID = New System.Data.DataColumn("Autor_UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_ChangedEventName", "Autor_UIDChanged")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_ChangingEventName", "Autor_UIDChanging")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Autor_UID")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Autor_UIDColumn")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAutor_UID")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_DelegateName", "Autor_UIDChangeEventHandler")
            Me.columnAutor_UID.ExtendedProperties.Add("Generator_EventArgName", "Autor_UIDChangeEventArg")
            Me.columnAutor_UID.ExtendedProperties.Add("User_ColumnName", "Autor_UID")
            MyBase.Columns.Add(Me.columnAutor_UID)
            Me.columnKontaktDaten = New System.Data.DataColumn("KontaktDaten", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_ChangedEventName", "KontaktDatenChanged")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_ChangingEventName", "KontaktDatenChanging")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "KontaktDaten")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "KontaktDatenColumn")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnKontaktDaten")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_DelegateName", "KontaktDatenChangeEventHandler")
            Me.columnKontaktDaten.ExtendedProperties.Add("Generator_EventArgName", "KontaktDatenChangeEventArg")
            Me.columnKontaktDaten.ExtendedProperties.Add("User_ColumnName", "KontaktDaten")
            MyBase.Columns.Add(Me.columnKontaktDaten)
            Me.columnKontaktArt_UID = New System.Data.DataColumn("KontaktArt_UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_ChangedEventName", "KontaktArt_UIDChanged")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_ChangingEventName", "KontaktArt_UIDChanging")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "KontaktArt_UID")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "KontaktArt_UIDColumn")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnKontaktArt_UID")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_DelegateName", "KontaktArt_UIDChangeEventHandler")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("Generator_EventArgName", "KontaktArt_UIDChangeEventArg")
            Me.columnKontaktArt_UID.ExtendedProperties.Add("User_ColumnName", "KontaktArt_UID")
            MyBase.Columns.Add(Me.columnKontaktArt_UID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUID}, true))
            Me.columnUID.AutoIncrement = true
            Me.columnUID.AllowDBNull = false
            Me.columnUID.Unique = true
            Me.columnKontaktDaten.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "KontakteRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "KontakteRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "KontakteRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "KontakteDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Kontakte")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableKontakte")
            Me.ExtendedProperties.Add("User_TableName", "Kontakte")
        End Sub
        
        Public Function NewKontakteRow() As KontakteRow
            Return CType(Me.NewRow,KontakteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New KontakteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KontakteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KontakteRowChangedEvent) Is Nothing) Then
                RaiseEvent KontakteRowChanged(Me, New KontakteRowChangeEvent(CType(e.Row,KontakteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KontakteRowChangingEvent) Is Nothing) Then
                RaiseEvent KontakteRowChanging(Me, New KontakteRowChangeEvent(CType(e.Row,KontakteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KontakteRowDeletedEvent) Is Nothing) Then
                RaiseEvent KontakteRowDeleted(Me, New KontakteRowChangeEvent(CType(e.Row,KontakteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KontakteRowDeletingEvent) Is Nothing) Then
                RaiseEvent KontakteRowDeleting(Me, New KontakteRowChangeEvent(CType(e.Row,KontakteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveKontakteRow(ByVal row As KontakteRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataDataSet = New DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KontakteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub UIDChangeEventHandler(ByVal sender As KontakteDataTable, ByVal e As UIDChangeEventArg)
        
        Public Class UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontakteRow
                Get
                    Return CType(Me.evArgs.Row,KontakteRow)
                End Get
            End Property
            
            Public ReadOnly Property UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub Autor_UIDChangeEventHandler(ByVal sender As KontakteDataTable, ByVal e As Autor_UIDChangeEventArg)
        
        Public Class Autor_UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontakteRow
                Get
                    Return CType(Me.evArgs.Row,KontakteRow)
                End Get
            End Property
            
            Public ReadOnly Property Autor_UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub KontaktDatenChangeEventHandler(ByVal sender As KontakteDataTable, ByVal e As KontaktDatenChangeEventArg)
        
        Public Class KontaktDatenChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontakteRow
                Get
                    Return CType(Me.evArgs.Row,KontakteRow)
                End Get
            End Property
            
            Public ReadOnly Property KontaktDatenColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub KontaktArt_UIDChangeEventHandler(ByVal sender As KontakteDataTable, ByVal e As KontaktArt_UIDChangeEventArg)
        
        Public Class KontaktArt_UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontakteRow
                Get
                    Return CType(Me.evArgs.Row,KontakteRow)
                End Get
            End Property
            
            Public ReadOnly Property KontaktArt_UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AutorenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUID As System.Data.DataColumn
        
        Private columnScreenName As System.Data.DataColumn
        
        Private columnVorName As System.Data.DataColumn
        
        Private columnNachName As System.Data.DataColumn
        
        Private columnGeburtstag As System.Data.DataColumn
        
        Private columnPasswort As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Autoren"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUID
            End Get
        End Property
        
        Friend ReadOnly Property ScreenNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnScreenName
            End Get
        End Property
        
        Friend ReadOnly Property VorNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnVorName
            End Get
        End Property
        
        Friend ReadOnly Property NachNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnNachName
            End Get
        End Property
        
        Friend ReadOnly Property GeburtstagColumn() As System.Data.DataColumn
            Get
                Return Me.columnGeburtstag
            End Get
        End Property
        
        Friend ReadOnly Property PasswortColumn() As System.Data.DataColumn
            Get
                Return Me.columnPasswort
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutorenRow
            Get
                Return CType(Me.Rows(index),AutorenRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event UIDChanging As UIDChangeEventHandler
        
        Public Event UIDChanged As UIDChangeEventHandler
        
        Public Event ScreenNameChanging As ScreenNameChangeEventHandler
        
        Public Event ScreenNameChanged As ScreenNameChangeEventHandler
        
        Public Event VorNameChanging As VorNameChangeEventHandler
        
        Public Event VorNameChanged As VorNameChangeEventHandler
        
        Public Event NachNameChanging As NachNameChangeEventHandler
        
        Public Event NachNameChanged As NachNameChangeEventHandler
        
        Public Event GeburtstagChanging As GeburtstagChangeEventHandler
        
        Public Event GeburtstagChanged As GeburtstagChangeEventHandler
        
        Public Event PasswortChanging As PasswortChangeEventHandler
        
        Public Event PasswortChanged As PasswortChangeEventHandler
        
        Public Event AutorenRowChanged As AutorenRowChangeEventHandler
        
        Public Event AutorenRowChanging As AutorenRowChangeEventHandler
        
        Public Event AutorenRowDeleted As AutorenRowChangeEventHandler
        
        Public Event AutorenRowDeleting As AutorenRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangingEvent) Is Nothing) Then
                    RaiseEvent UIDChanging(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "ScreenName") Then
                    If (Not (Me.ScreenNameChangingEvent) Is Nothing) Then
                        RaiseEvent ScreenNameChanging(Me, New ScreenNameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "VorName") Then
                        If (Not (Me.VorNameChangingEvent) Is Nothing) Then
                            RaiseEvent VorNameChanging(Me, New VorNameChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "NachName") Then
                            If (Not (Me.NachNameChangingEvent) Is Nothing) Then
                                RaiseEvent NachNameChanging(Me, New NachNameChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "Geburtstag") Then
                                If (Not (Me.GeburtstagChangingEvent) Is Nothing) Then
                                    RaiseEvent GeburtstagChanging(Me, New GeburtstagChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "Passwort") Then
                                    If (Not (Me.PasswortChangingEvent) Is Nothing) Then
                                        RaiseEvent PasswortChanging(Me, New PasswortChangeEventArg(e))
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangedEvent) Is Nothing) Then
                    RaiseEvent UIDChanged(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "ScreenName") Then
                    If (Not (Me.ScreenNameChangedEvent) Is Nothing) Then
                        RaiseEvent ScreenNameChanged(Me, New ScreenNameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "VorName") Then
                        If (Not (Me.VorNameChangedEvent) Is Nothing) Then
                            RaiseEvent VorNameChanged(Me, New VorNameChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "NachName") Then
                            If (Not (Me.NachNameChangedEvent) Is Nothing) Then
                                RaiseEvent NachNameChanged(Me, New NachNameChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "Geburtstag") Then
                                If (Not (Me.GeburtstagChangedEvent) Is Nothing) Then
                                    RaiseEvent GeburtstagChanged(Me, New GeburtstagChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "Passwort") Then
                                    If (Not (Me.PasswortChangedEvent) Is Nothing) Then
                                        RaiseEvent PasswortChanged(Me, New PasswortChangeEventArg(e))
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddAutorenRow(ByVal row As AutorenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutorenRow(ByVal ScreenName As String, ByVal VorName As String, ByVal NachName As String, ByVal Geburtstag As Date, ByVal Passwort As String) As AutorenRow
            Dim rowAutorenRow As AutorenRow = CType(Me.NewRow,AutorenRow)
            rowAutorenRow.ItemArray = New Object() {Nothing, ScreenName, VorName, NachName, Geburtstag, Passwort}
            Me.Rows.Add(rowAutorenRow)
            Return rowAutorenRow
        End Function
        
        Public Function FindByUID(ByVal UID As Integer) As AutorenRow
            Return CType(Me.Rows.Find(New Object() {UID}),AutorenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AutorenDataTable = CType(MyBase.Clone,AutorenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AutorenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUID = MyBase.Columns("UID")
            Me.columnScreenName = MyBase.Columns("ScreenName")
            Me.columnVorName = MyBase.Columns("VorName")
            Me.columnNachName = MyBase.Columns("NachName")
            Me.columnGeburtstag = MyBase.Columns("Geburtstag")
            Me.columnPasswort = MyBase.Columns("Passwort")
        End Sub
        
        Private Sub InitClass()
            Me.columnUID = New System.Data.DataColumn("UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnUID.ExtendedProperties.Add("Generator_ChangedEventName", "UIDChanged")
            Me.columnUID.ExtendedProperties.Add("Generator_ChangingEventName", "UIDChanging")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UID")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UIDColumn")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUID")
            Me.columnUID.ExtendedProperties.Add("Generator_DelegateName", "UIDChangeEventHandler")
            Me.columnUID.ExtendedProperties.Add("Generator_EventArgName", "UIDChangeEventArg")
            Me.columnUID.ExtendedProperties.Add("User_ColumnName", "UID")
            MyBase.Columns.Add(Me.columnUID)
            Me.columnScreenName = New System.Data.DataColumn("ScreenName", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnScreenName.ExtendedProperties.Add("Generator_ChangedEventName", "ScreenNameChanged")
            Me.columnScreenName.ExtendedProperties.Add("Generator_ChangingEventName", "ScreenNameChanging")
            Me.columnScreenName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ScreenName")
            Me.columnScreenName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ScreenNameColumn")
            Me.columnScreenName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnScreenName")
            Me.columnScreenName.ExtendedProperties.Add("Generator_DelegateName", "ScreenNameChangeEventHandler")
            Me.columnScreenName.ExtendedProperties.Add("Generator_EventArgName", "ScreenNameChangeEventArg")
            Me.columnScreenName.ExtendedProperties.Add("User_ColumnName", "ScreenName")
            MyBase.Columns.Add(Me.columnScreenName)
            Me.columnVorName = New System.Data.DataColumn("VorName", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnVorName.ExtendedProperties.Add("Generator_ChangedEventName", "VorNameChanged")
            Me.columnVorName.ExtendedProperties.Add("Generator_ChangingEventName", "VorNameChanging")
            Me.columnVorName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "VorName")
            Me.columnVorName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "VorNameColumn")
            Me.columnVorName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnVorName")
            Me.columnVorName.ExtendedProperties.Add("Generator_DelegateName", "VorNameChangeEventHandler")
            Me.columnVorName.ExtendedProperties.Add("Generator_EventArgName", "VorNameChangeEventArg")
            Me.columnVorName.ExtendedProperties.Add("User_ColumnName", "VorName")
            MyBase.Columns.Add(Me.columnVorName)
            Me.columnNachName = New System.Data.DataColumn("NachName", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnNachName.ExtendedProperties.Add("Generator_ChangedEventName", "NachNameChanged")
            Me.columnNachName.ExtendedProperties.Add("Generator_ChangingEventName", "NachNameChanging")
            Me.columnNachName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "NachName")
            Me.columnNachName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NachNameColumn")
            Me.columnNachName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnNachName")
            Me.columnNachName.ExtendedProperties.Add("Generator_DelegateName", "NachNameChangeEventHandler")
            Me.columnNachName.ExtendedProperties.Add("Generator_EventArgName", "NachNameChangeEventArg")
            Me.columnNachName.ExtendedProperties.Add("User_ColumnName", "NachName")
            MyBase.Columns.Add(Me.columnNachName)
            Me.columnGeburtstag = New System.Data.DataColumn("Geburtstag", GetType(Date), Nothing, System.Data.MappingType.Element)
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_ChangedEventName", "GeburtstagChanged")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_ChangingEventName", "GeburtstagChanging")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Geburtstag")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "GeburtstagColumn")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGeburtstag")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_DelegateName", "GeburtstagChangeEventHandler")
            Me.columnGeburtstag.ExtendedProperties.Add("Generator_EventArgName", "GeburtstagChangeEventArg")
            Me.columnGeburtstag.ExtendedProperties.Add("User_ColumnName", "Geburtstag")
            MyBase.Columns.Add(Me.columnGeburtstag)
            Me.columnPasswort = New System.Data.DataColumn("Passwort", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnPasswort.ExtendedProperties.Add("Generator_ChangedEventName", "PasswortChanged")
            Me.columnPasswort.ExtendedProperties.Add("Generator_ChangingEventName", "PasswortChanging")
            Me.columnPasswort.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Passwort")
            Me.columnPasswort.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PasswortColumn")
            Me.columnPasswort.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPasswort")
            Me.columnPasswort.ExtendedProperties.Add("Generator_DelegateName", "PasswortChangeEventHandler")
            Me.columnPasswort.ExtendedProperties.Add("Generator_EventArgName", "PasswortChangeEventArg")
            Me.columnPasswort.ExtendedProperties.Add("User_ColumnName", "Passwort")
            MyBase.Columns.Add(Me.columnPasswort)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUID}, true))
            Me.columnUID.AutoIncrement = true
            Me.columnUID.AllowDBNull = false
            Me.columnUID.Unique = true
            Me.columnScreenName.MaxLength = 50
            Me.columnVorName.MaxLength = 50
            Me.columnNachName.MaxLength = 50
            Me.columnPasswort.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "AutorenRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "AutorenRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "AutorenRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "AutorenDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Autoren")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableAutoren")
            Me.ExtendedProperties.Add("User_TableName", "Autoren")
        End Sub
        
        Public Function NewAutorenRow() As AutorenRow
            Return CType(Me.NewRow,AutorenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AutorenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutorenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutorenRowChangedEvent) Is Nothing) Then
                RaiseEvent AutorenRowChanged(Me, New AutorenRowChangeEvent(CType(e.Row,AutorenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutorenRowChangingEvent) Is Nothing) Then
                RaiseEvent AutorenRowChanging(Me, New AutorenRowChangeEvent(CType(e.Row,AutorenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutorenRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutorenRowDeleted(Me, New AutorenRowChangeEvent(CType(e.Row,AutorenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutorenRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutorenRowDeleting(Me, New AutorenRowChangeEvent(CType(e.Row,AutorenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutorenRow(ByVal row As AutorenRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataDataSet = New DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AutorenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub UIDChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As UIDChangeEventArg)
        
        Public Class UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub ScreenNameChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As ScreenNameChangeEventArg)
        
        Public Class ScreenNameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property ScreenNameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub VorNameChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As VorNameChangeEventArg)
        
        Public Class VorNameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property VorNameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub NachNameChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As NachNameChangeEventArg)
        
        Public Class NachNameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property NachNameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub GeburtstagChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As GeburtstagChangeEventArg)
        
        Public Class GeburtstagChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property GeburtstagColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Date
                Get
                    Return CType(Me.evArgs.ProposedValue,Date)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Date)
                End Set
            End Property
        End Class
        
        Public Delegate Sub PasswortChangeEventHandler(ByVal sender As AutorenDataTable, ByVal e As PasswortChangeEventArg)
        
        Public Class PasswortChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AutorenRow
                Get
                    Return CType(Me.evArgs.Row,AutorenRow)
                End Get
            End Property
            
            Public ReadOnly Property PasswortColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdressenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUID As System.Data.DataColumn
        
        Private columnAuthor_UID As System.Data.DataColumn
        
        Private columnLand As System.Data.DataColumn
        
        Private columnPLZ As System.Data.DataColumn
        
        Private columnOrt As System.Data.DataColumn
        
        Private columnStrasse As System.Data.DataColumn
        
        Private columnHausNummer As System.Data.DataColumn
        
        Private columnAdressArt_UID As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Adressen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUID
            End Get
        End Property
        
        Friend ReadOnly Property Author_UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAuthor_UID
            End Get
        End Property
        
        Friend ReadOnly Property LandColumn() As System.Data.DataColumn
            Get
                Return Me.columnLand
            End Get
        End Property
        
        Friend ReadOnly Property PLZColumn() As System.Data.DataColumn
            Get
                Return Me.columnPLZ
            End Get
        End Property
        
        Friend ReadOnly Property OrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrt
            End Get
        End Property
        
        Friend ReadOnly Property StrasseColumn() As System.Data.DataColumn
            Get
                Return Me.columnStrasse
            End Get
        End Property
        
        Friend ReadOnly Property HausNummerColumn() As System.Data.DataColumn
            Get
                Return Me.columnHausNummer
            End Get
        End Property
        
        Friend ReadOnly Property AdressArt_UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAdressArt_UID
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdressenRow
            Get
                Return CType(Me.Rows(index),AdressenRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event UIDChanging As UIDChangeEventHandler
        
        Public Event UIDChanged As UIDChangeEventHandler
        
        Public Event Author_UIDChanging As Author_UIDChangeEventHandler
        
        Public Event Author_UIDChanged As Author_UIDChangeEventHandler
        
        Public Event LandChanging As LandChangeEventHandler
        
        Public Event LandChanged As LandChangeEventHandler
        
        Public Event PLZChanging As PLZChangeEventHandler
        
        Public Event PLZChanged As PLZChangeEventHandler
        
        Public Event OrtChanging As OrtChangeEventHandler
        
        Public Event OrtChanged As OrtChangeEventHandler
        
        Public Event StrasseChanging As StrasseChangeEventHandler
        
        Public Event StrasseChanged As StrasseChangeEventHandler
        
        Public Event HausNummerChanging As HausNummerChangeEventHandler
        
        Public Event HausNummerChanged As HausNummerChangeEventHandler
        
        Public Event AdressArt_UIDChanging As AdressArt_UIDChangeEventHandler
        
        Public Event AdressArt_UIDChanged As AdressArt_UIDChangeEventHandler
        
        Public Event AdressenRowChanged As AdressenRowChangeEventHandler
        
        Public Event AdressenRowChanging As AdressenRowChangeEventHandler
        
        Public Event AdressenRowDeleted As AdressenRowChangeEventHandler
        
        Public Event AdressenRowDeleting As AdressenRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangingEvent) Is Nothing) Then
                    RaiseEvent UIDChanging(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Author_UID") Then
                    If (Not (Me.Author_UIDChangingEvent) Is Nothing) Then
                        RaiseEvent Author_UIDChanging(Me, New Author_UIDChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Land") Then
                        If (Not (Me.LandChangingEvent) Is Nothing) Then
                            RaiseEvent LandChanging(Me, New LandChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "PLZ") Then
                            If (Not (Me.PLZChangingEvent) Is Nothing) Then
                                RaiseEvent PLZChanging(Me, New PLZChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "Ort") Then
                                If (Not (Me.OrtChangingEvent) Is Nothing) Then
                                    RaiseEvent OrtChanging(Me, New OrtChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "Strasse") Then
                                    If (Not (Me.StrasseChangingEvent) Is Nothing) Then
                                        RaiseEvent StrasseChanging(Me, New StrasseChangeEventArg(e))
                                    End If
                                Else
                                    If (e.Column.ColumnName Is "HausNummer") Then
                                        If (Not (Me.HausNummerChangingEvent) Is Nothing) Then
                                            RaiseEvent HausNummerChanging(Me, New HausNummerChangeEventArg(e))
                                        End If
                                    Else
                                        If (e.Column.ColumnName Is "AdressArt_UID") Then
                                            If (Not (Me.AdressArt_UIDChangingEvent) Is Nothing) Then
                                                RaiseEvent AdressArt_UIDChanging(Me, New AdressArt_UIDChangeEventArg(e))
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangedEvent) Is Nothing) Then
                    RaiseEvent UIDChanged(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Author_UID") Then
                    If (Not (Me.Author_UIDChangedEvent) Is Nothing) Then
                        RaiseEvent Author_UIDChanged(Me, New Author_UIDChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Land") Then
                        If (Not (Me.LandChangedEvent) Is Nothing) Then
                            RaiseEvent LandChanged(Me, New LandChangeEventArg(e))
                        End If
                    Else
                        If (e.Column.ColumnName Is "PLZ") Then
                            If (Not (Me.PLZChangedEvent) Is Nothing) Then
                                RaiseEvent PLZChanged(Me, New PLZChangeEventArg(e))
                            End If
                        Else
                            If (e.Column.ColumnName Is "Ort") Then
                                If (Not (Me.OrtChangedEvent) Is Nothing) Then
                                    RaiseEvent OrtChanged(Me, New OrtChangeEventArg(e))
                                End If
                            Else
                                If (e.Column.ColumnName Is "Strasse") Then
                                    If (Not (Me.StrasseChangedEvent) Is Nothing) Then
                                        RaiseEvent StrasseChanged(Me, New StrasseChangeEventArg(e))
                                    End If
                                Else
                                    If (e.Column.ColumnName Is "HausNummer") Then
                                        If (Not (Me.HausNummerChangedEvent) Is Nothing) Then
                                            RaiseEvent HausNummerChanged(Me, New HausNummerChangeEventArg(e))
                                        End If
                                    Else
                                        If (e.Column.ColumnName Is "AdressArt_UID") Then
                                            If (Not (Me.AdressArt_UIDChangedEvent) Is Nothing) Then
                                                RaiseEvent AdressArt_UIDChanged(Me, New AdressArt_UIDChangeEventArg(e))
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddAdressenRow(ByVal row As AdressenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdressenRow(ByVal parentAutorenRowByAutorenAdressen As AutorenRow, ByVal Land As String, ByVal PLZ As String, ByVal Ort As String, ByVal Strasse As String, ByVal HausNummer As String, ByVal parentAdressArtenRowByAdressArtenAdressen As AdressArtenRow) As AdressenRow
            Dim rowAdressenRow As AdressenRow = CType(Me.NewRow,AdressenRow)
            rowAdressenRow.ItemArray = New Object() {Nothing, parentAutorenRowByAutorenAdressen(0), Land, PLZ, Ort, Strasse, HausNummer, parentAdressArtenRowByAdressArtenAdressen(0)}
            Me.Rows.Add(rowAdressenRow)
            Return rowAdressenRow
        End Function
        
        Public Function FindByUID(ByVal UID As Integer) As AdressenRow
            Return CType(Me.Rows.Find(New Object() {UID}),AdressenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AdressenDataTable = CType(MyBase.Clone,AdressenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AdressenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUID = MyBase.Columns("UID")
            Me.columnAuthor_UID = MyBase.Columns("Author_UID")
            Me.columnLand = MyBase.Columns("Land")
            Me.columnPLZ = MyBase.Columns("PLZ")
            Me.columnOrt = MyBase.Columns("Ort")
            Me.columnStrasse = MyBase.Columns("Strasse")
            Me.columnHausNummer = MyBase.Columns("HausNummer")
            Me.columnAdressArt_UID = MyBase.Columns("AdressArt_UID")
        End Sub
        
        Private Sub InitClass()
            Me.columnUID = New System.Data.DataColumn("UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnUID.ExtendedProperties.Add("Generator_ChangedEventName", "UIDChanged")
            Me.columnUID.ExtendedProperties.Add("Generator_ChangingEventName", "UIDChanging")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UID")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UIDColumn")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUID")
            Me.columnUID.ExtendedProperties.Add("Generator_DelegateName", "UIDChangeEventHandler")
            Me.columnUID.ExtendedProperties.Add("Generator_EventArgName", "UIDChangeEventArg")
            Me.columnUID.ExtendedProperties.Add("User_ColumnName", "UID")
            MyBase.Columns.Add(Me.columnUID)
            Me.columnAuthor_UID = New System.Data.DataColumn("Author_UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_ChangedEventName", "Author_UIDChanged")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_ChangingEventName", "Author_UIDChanging")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Author_UID")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Author_UIDColumn")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAuthor_UID")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_DelegateName", "Author_UIDChangeEventHandler")
            Me.columnAuthor_UID.ExtendedProperties.Add("Generator_EventArgName", "Author_UIDChangeEventArg")
            Me.columnAuthor_UID.ExtendedProperties.Add("User_ColumnName", "Author_UID")
            MyBase.Columns.Add(Me.columnAuthor_UID)
            Me.columnLand = New System.Data.DataColumn("Land", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnLand.ExtendedProperties.Add("Generator_ChangedEventName", "LandChanged")
            Me.columnLand.ExtendedProperties.Add("Generator_ChangingEventName", "LandChanging")
            Me.columnLand.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Land")
            Me.columnLand.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LandColumn")
            Me.columnLand.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLand")
            Me.columnLand.ExtendedProperties.Add("Generator_DelegateName", "LandChangeEventHandler")
            Me.columnLand.ExtendedProperties.Add("Generator_EventArgName", "LandChangeEventArg")
            Me.columnLand.ExtendedProperties.Add("User_ColumnName", "Land")
            MyBase.Columns.Add(Me.columnLand)
            Me.columnPLZ = New System.Data.DataColumn("PLZ", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnPLZ.ExtendedProperties.Add("Generator_ChangedEventName", "PLZChanged")
            Me.columnPLZ.ExtendedProperties.Add("Generator_ChangingEventName", "PLZChanging")
            Me.columnPLZ.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PLZ")
            Me.columnPLZ.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PLZColumn")
            Me.columnPLZ.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPLZ")
            Me.columnPLZ.ExtendedProperties.Add("Generator_DelegateName", "PLZChangeEventHandler")
            Me.columnPLZ.ExtendedProperties.Add("Generator_EventArgName", "PLZChangeEventArg")
            Me.columnPLZ.ExtendedProperties.Add("User_ColumnName", "PLZ")
            MyBase.Columns.Add(Me.columnPLZ)
            Me.columnOrt = New System.Data.DataColumn("Ort", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnOrt.ExtendedProperties.Add("Generator_ChangedEventName", "OrtChanged")
            Me.columnOrt.ExtendedProperties.Add("Generator_ChangingEventName", "OrtChanging")
            Me.columnOrt.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Ort")
            Me.columnOrt.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrtColumn")
            Me.columnOrt.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrt")
            Me.columnOrt.ExtendedProperties.Add("Generator_DelegateName", "OrtChangeEventHandler")
            Me.columnOrt.ExtendedProperties.Add("Generator_EventArgName", "OrtChangeEventArg")
            Me.columnOrt.ExtendedProperties.Add("User_ColumnName", "Ort")
            MyBase.Columns.Add(Me.columnOrt)
            Me.columnStrasse = New System.Data.DataColumn("Strasse", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnStrasse.ExtendedProperties.Add("Generator_ChangedEventName", "StrasseChanged")
            Me.columnStrasse.ExtendedProperties.Add("Generator_ChangingEventName", "StrasseChanging")
            Me.columnStrasse.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Strasse")
            Me.columnStrasse.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StrasseColumn")
            Me.columnStrasse.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnStrasse")
            Me.columnStrasse.ExtendedProperties.Add("Generator_DelegateName", "StrasseChangeEventHandler")
            Me.columnStrasse.ExtendedProperties.Add("Generator_EventArgName", "StrasseChangeEventArg")
            Me.columnStrasse.ExtendedProperties.Add("User_ColumnName", "Strasse")
            MyBase.Columns.Add(Me.columnStrasse)
            Me.columnHausNummer = New System.Data.DataColumn("HausNummer", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnHausNummer.ExtendedProperties.Add("Generator_ChangedEventName", "HausNummerChanged")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_ChangingEventName", "HausNummerChanging")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "HausNummer")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "HausNummerColumn")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHausNummer")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_DelegateName", "HausNummerChangeEventHandler")
            Me.columnHausNummer.ExtendedProperties.Add("Generator_EventArgName", "HausNummerChangeEventArg")
            Me.columnHausNummer.ExtendedProperties.Add("User_ColumnName", "HausNummer")
            MyBase.Columns.Add(Me.columnHausNummer)
            Me.columnAdressArt_UID = New System.Data.DataColumn("AdressArt_UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_ChangedEventName", "AdressArt_UIDChanged")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_ChangingEventName", "AdressArt_UIDChanging")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "AdressArt_UID")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AdressArt_UIDColumn")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAdressArt_UID")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_DelegateName", "AdressArt_UIDChangeEventHandler")
            Me.columnAdressArt_UID.ExtendedProperties.Add("Generator_EventArgName", "AdressArt_UIDChangeEventArg")
            Me.columnAdressArt_UID.ExtendedProperties.Add("User_ColumnName", "AdressArt_UID")
            MyBase.Columns.Add(Me.columnAdressArt_UID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUID}, true))
            Me.columnUID.AutoIncrement = true
            Me.columnUID.AllowDBNull = false
            Me.columnUID.Unique = true
            Me.columnLand.MaxLength = 50
            Me.columnPLZ.MaxLength = 50
            Me.columnOrt.MaxLength = 50
            Me.columnStrasse.MaxLength = 50
            Me.columnHausNummer.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "AdressenRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "AdressenRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "AdressenRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "AdressenDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Adressen")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableAdressen")
            Me.ExtendedProperties.Add("User_TableName", "Adressen")
        End Sub
        
        Public Function NewAdressenRow() As AdressenRow
            Return CType(Me.NewRow,AdressenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AdressenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdressenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdressenRowChangedEvent) Is Nothing) Then
                RaiseEvent AdressenRowChanged(Me, New AdressenRowChangeEvent(CType(e.Row,AdressenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdressenRowChangingEvent) Is Nothing) Then
                RaiseEvent AdressenRowChanging(Me, New AdressenRowChangeEvent(CType(e.Row,AdressenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdressenRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdressenRowDeleted(Me, New AdressenRowChangeEvent(CType(e.Row,AdressenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdressenRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdressenRowDeleting(Me, New AdressenRowChangeEvent(CType(e.Row,AdressenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdressenRow(ByVal row As AdressenRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataDataSet = New DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdressenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub UIDChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As UIDChangeEventArg)
        
        Public Class UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub Author_UIDChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As Author_UIDChangeEventArg)
        
        Public Class Author_UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property Author_UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub LandChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As LandChangeEventArg)
        
        Public Class LandChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property LandColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub PLZChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As PLZChangeEventArg)
        
        Public Class PLZChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property PLZColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub OrtChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As OrtChangeEventArg)
        
        Public Class OrtChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property OrtColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub StrasseChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As StrasseChangeEventArg)
        
        Public Class StrasseChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property StrasseColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub HausNummerChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As HausNummerChangeEventArg)
        
        Public Class HausNummerChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property HausNummerColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub AdressArt_UIDChangeEventHandler(ByVal sender As AdressenDataTable, ByVal e As AdressArt_UIDChangeEventArg)
        
        Public Class AdressArt_UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressenRow
                Get
                    Return CType(Me.evArgs.Row,AdressenRow)
                End Get
            End Property
            
            Public ReadOnly Property AdressArt_UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KontaktArtenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUID As System.Data.DataColumn
        
        Private columnKontaktArt As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "KontaktArten"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUID
            End Get
        End Property
        
        Friend ReadOnly Property KontaktArtColumn() As System.Data.DataColumn
            Get
                Return Me.columnKontaktArt
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As KontaktArtenRow
            Get
                Return CType(Me.Rows(index),KontaktArtenRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event UIDChanging As UIDChangeEventHandler
        
        Public Event UIDChanged As UIDChangeEventHandler
        
        Public Event KontaktArtChanging As KontaktArtChangeEventHandler
        
        Public Event KontaktArtChanged As KontaktArtChangeEventHandler
        
        Public Event KontaktArtenRowChanged As KontaktArtenRowChangeEventHandler
        
        Public Event KontaktArtenRowChanging As KontaktArtenRowChangeEventHandler
        
        Public Event KontaktArtenRowDeleted As KontaktArtenRowChangeEventHandler
        
        Public Event KontaktArtenRowDeleting As KontaktArtenRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangingEvent) Is Nothing) Then
                    RaiseEvent UIDChanging(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "KontaktArt") Then
                    If (Not (Me.KontaktArtChangingEvent) Is Nothing) Then
                        RaiseEvent KontaktArtChanging(Me, New KontaktArtChangeEventArg(e))
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangedEvent) Is Nothing) Then
                    RaiseEvent UIDChanged(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "KontaktArt") Then
                    If (Not (Me.KontaktArtChangedEvent) Is Nothing) Then
                        RaiseEvent KontaktArtChanged(Me, New KontaktArtChangeEventArg(e))
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddKontaktArtenRow(ByVal row As KontaktArtenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddKontaktArtenRow(ByVal KontaktArt As String) As KontaktArtenRow
            Dim rowKontaktArtenRow As KontaktArtenRow = CType(Me.NewRow,KontaktArtenRow)
            rowKontaktArtenRow.ItemArray = New Object() {Nothing, KontaktArt}
            Me.Rows.Add(rowKontaktArtenRow)
            Return rowKontaktArtenRow
        End Function
        
        Public Function FindByUID(ByVal UID As Integer) As KontaktArtenRow
            Return CType(Me.Rows.Find(New Object() {UID}),KontaktArtenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As KontaktArtenDataTable = CType(MyBase.Clone,KontaktArtenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New KontaktArtenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUID = MyBase.Columns("UID")
            Me.columnKontaktArt = MyBase.Columns("KontaktArt")
        End Sub
        
        Private Sub InitClass()
            Me.columnUID = New System.Data.DataColumn("UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnUID.ExtendedProperties.Add("Generator_ChangedEventName", "UIDChanged")
            Me.columnUID.ExtendedProperties.Add("Generator_ChangingEventName", "UIDChanging")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UID")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UIDColumn")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUID")
            Me.columnUID.ExtendedProperties.Add("Generator_DelegateName", "UIDChangeEventHandler")
            Me.columnUID.ExtendedProperties.Add("Generator_EventArgName", "UIDChangeEventArg")
            Me.columnUID.ExtendedProperties.Add("User_ColumnName", "UID")
            MyBase.Columns.Add(Me.columnUID)
            Me.columnKontaktArt = New System.Data.DataColumn("KontaktArt", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_ChangedEventName", "KontaktArtChanged")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_ChangingEventName", "KontaktArtChanging")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "KontaktArt")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "KontaktArtColumn")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnKontaktArt")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_DelegateName", "KontaktArtChangeEventHandler")
            Me.columnKontaktArt.ExtendedProperties.Add("Generator_EventArgName", "KontaktArtChangeEventArg")
            Me.columnKontaktArt.ExtendedProperties.Add("User_ColumnName", "KontaktArt")
            MyBase.Columns.Add(Me.columnKontaktArt)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUID}, true))
            Me.columnUID.AutoIncrement = true
            Me.columnUID.AllowDBNull = false
            Me.columnUID.Unique = true
            Me.columnKontaktArt.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "KontaktArtenRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "KontaktArtenRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "KontaktArtenRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "KontaktArtenDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "KontaktArten")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableKontaktArten")
            Me.ExtendedProperties.Add("User_TableName", "KontaktArten")
        End Sub
        
        Public Function NewKontaktArtenRow() As KontaktArtenRow
            Return CType(Me.NewRow,KontaktArtenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New KontaktArtenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KontaktArtenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KontaktArtenRowChangedEvent) Is Nothing) Then
                RaiseEvent KontaktArtenRowChanged(Me, New KontaktArtenRowChangeEvent(CType(e.Row,KontaktArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KontaktArtenRowChangingEvent) Is Nothing) Then
                RaiseEvent KontaktArtenRowChanging(Me, New KontaktArtenRowChangeEvent(CType(e.Row,KontaktArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KontaktArtenRowDeletedEvent) Is Nothing) Then
                RaiseEvent KontaktArtenRowDeleted(Me, New KontaktArtenRowChangeEvent(CType(e.Row,KontaktArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KontaktArtenRowDeletingEvent) Is Nothing) Then
                RaiseEvent KontaktArtenRowDeleting(Me, New KontaktArtenRowChangeEvent(CType(e.Row,KontaktArtenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveKontaktArtenRow(ByVal row As KontaktArtenRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataDataSet = New DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KontaktArtenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub UIDChangeEventHandler(ByVal sender As KontaktArtenDataTable, ByVal e As UIDChangeEventArg)
        
        Public Class UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontaktArtenRow
                Get
                    Return CType(Me.evArgs.Row,KontaktArtenRow)
                End Get
            End Property
            
            Public ReadOnly Property UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub KontaktArtChangeEventHandler(ByVal sender As KontaktArtenDataTable, ByVal e As KontaktArtChangeEventArg)
        
        Public Class KontaktArtChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As KontaktArtenRow
                Get
                    Return CType(Me.evArgs.Row,KontaktArtenRow)
                End Get
            End Property
            
            Public ReadOnly Property KontaktArtColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdressArtenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUID As System.Data.DataColumn
        
        Private columnAdressArt As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "AdressArten"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property UIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUID
            End Get
        End Property
        
        Friend ReadOnly Property AdressArtColumn() As System.Data.DataColumn
            Get
                Return Me.columnAdressArt
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdressArtenRow
            Get
                Return CType(Me.Rows(index),AdressArtenRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event UIDChanging As UIDChangeEventHandler
        
        Public Event UIDChanged As UIDChangeEventHandler
        
        Public Event AdressArtChanging As AdressArtChangeEventHandler
        
        Public Event AdressArtChanged As AdressArtChangeEventHandler
        
        Public Event AdressArtenRowChanged As AdressArtenRowChangeEventHandler
        
        Public Event AdressArtenRowChanging As AdressArtenRowChangeEventHandler
        
        Public Event AdressArtenRowDeleted As AdressArtenRowChangeEventHandler
        
        Public Event AdressArtenRowDeleting As AdressArtenRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangingEvent) Is Nothing) Then
                    RaiseEvent UIDChanging(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "AdressArt") Then
                    If (Not (Me.AdressArtChangingEvent) Is Nothing) Then
                        RaiseEvent AdressArtChanging(Me, New AdressArtChangeEventArg(e))
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "UID") Then
                If (Not (Me.UIDChangedEvent) Is Nothing) Then
                    RaiseEvent UIDChanged(Me, New UIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "AdressArt") Then
                    If (Not (Me.AdressArtChangedEvent) Is Nothing) Then
                        RaiseEvent AdressArtChanged(Me, New AdressArtChangeEventArg(e))
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddAdressArtenRow(ByVal row As AdressArtenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdressArtenRow(ByVal AdressArt As String) As AdressArtenRow
            Dim rowAdressArtenRow As AdressArtenRow = CType(Me.NewRow,AdressArtenRow)
            rowAdressArtenRow.ItemArray = New Object() {Nothing, AdressArt}
            Me.Rows.Add(rowAdressArtenRow)
            Return rowAdressArtenRow
        End Function
        
        Public Function FindByUID(ByVal UID As Integer) As AdressArtenRow
            Return CType(Me.Rows.Find(New Object() {UID}),AdressArtenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AdressArtenDataTable = CType(MyBase.Clone,AdressArtenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AdressArtenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUID = MyBase.Columns("UID")
            Me.columnAdressArt = MyBase.Columns("AdressArt")
        End Sub
        
        Private Sub InitClass()
            Me.columnUID = New System.Data.DataColumn("UID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnUID.ExtendedProperties.Add("Generator_ChangedEventName", "UIDChanged")
            Me.columnUID.ExtendedProperties.Add("Generator_ChangingEventName", "UIDChanging")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UID")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UIDColumn")
            Me.columnUID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUID")
            Me.columnUID.ExtendedProperties.Add("Generator_DelegateName", "UIDChangeEventHandler")
            Me.columnUID.ExtendedProperties.Add("Generator_EventArgName", "UIDChangeEventArg")
            Me.columnUID.ExtendedProperties.Add("User_ColumnName", "UID")
            MyBase.Columns.Add(Me.columnUID)
            Me.columnAdressArt = New System.Data.DataColumn("AdressArt", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnAdressArt.ExtendedProperties.Add("Generator_ChangedEventName", "AdressArtChanged")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_ChangingEventName", "AdressArtChanging")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "AdressArt")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AdressArtColumn")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAdressArt")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_DelegateName", "AdressArtChangeEventHandler")
            Me.columnAdressArt.ExtendedProperties.Add("Generator_EventArgName", "AdressArtChangeEventArg")
            Me.columnAdressArt.ExtendedProperties.Add("User_ColumnName", "AdressArt")
            MyBase.Columns.Add(Me.columnAdressArt)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUID}, true))
            Me.columnUID.AutoIncrement = true
            Me.columnUID.AllowDBNull = false
            Me.columnUID.Unique = true
            Me.columnAdressArt.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "AdressArtenRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "AdressArtenRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "AdressArtenRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "AdressArtenDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "AdressArten")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableAdressArten")
            Me.ExtendedProperties.Add("User_TableName", "AdressArten")
        End Sub
        
        Public Function NewAdressArtenRow() As AdressArtenRow
            Return CType(Me.NewRow,AdressArtenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AdressArtenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdressArtenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdressArtenRowChangedEvent) Is Nothing) Then
                RaiseEvent AdressArtenRowChanged(Me, New AdressArtenRowChangeEvent(CType(e.Row,AdressArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdressArtenRowChangingEvent) Is Nothing) Then
                RaiseEvent AdressArtenRowChanging(Me, New AdressArtenRowChangeEvent(CType(e.Row,AdressArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdressArtenRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdressArtenRowDeleted(Me, New AdressArtenRowChangeEvent(CType(e.Row,AdressArtenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdressArtenRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdressArtenRowDeleting(Me, New AdressArtenRowChangeEvent(CType(e.Row,AdressArtenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdressArtenRow(ByVal row As AdressArtenRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataDataSet = New DataDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdressArtenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub UIDChangeEventHandler(ByVal sender As AdressArtenDataTable, ByVal e As UIDChangeEventArg)
        
        Public Class UIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressArtenRow
                Get
                    Return CType(Me.evArgs.Row,AdressArtenRow)
                End Get
            End Property
            
            Public ReadOnly Property UIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub AdressArtChangeEventHandler(ByVal sender As AdressArtenDataTable, ByVal e As AdressArtChangeEventArg)
        
        Public Class AdressArtChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As AdressArtenRow
                Get
                    Return CType(Me.evArgs.Row,AdressArtenRow)
                End Get
            End Property
            
            Public ReadOnly Property AdressArtColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    Public Class KontakteRow
        Inherits System.Data.DataRow
        
        Private tableKontakte As KontakteDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKontakte = CType(Me.Table,KontakteDataTable)
        End Sub
        
        Public Property UID() As Integer
            Get
                Return CType(Me(Me.tableKontakte.UIDColumn),Integer)
            End Get
            Set
                Me(Me.tableKontakte.UIDColumn) = value
            End Set
        End Property
        
        Public Property Autor_UID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKontakte.Autor_UIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableKontakte.Autor_UIDColumn) = value
            End Set
        End Property
        
        Public Property KontaktDaten() As String
            Get
                Try 
                    Return CType(Me(Me.tableKontakte.KontaktDatenColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableKontakte.KontaktDatenColumn) = value
            End Set
        End Property
        
        Public Property KontaktArt_UID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKontakte.KontaktArt_UIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableKontakte.KontaktArt_UIDColumn) = value
            End Set
        End Property
        
        Public Property KontaktArtenRow() As KontaktArtenRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("KontaktArtenKontakte")),KontaktArtenRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("KontaktArtenKontakte"))
            End Set
        End Property
        
        Public Property AutorenRow() As AutorenRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AutorenKontakte")),AutorenRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AutorenKontakte"))
            End Set
        End Property
        
        Public Function IsAutor_UIDNull() As Boolean
            Return Me.IsNull(Me.tableKontakte.Autor_UIDColumn)
        End Function
        
        Public Sub SetAutor_UIDNull()
            Me(Me.tableKontakte.Autor_UIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKontaktDatenNull() As Boolean
            Return Me.IsNull(Me.tableKontakte.KontaktDatenColumn)
        End Function
        
        Public Sub SetKontaktDatenNull()
            Me(Me.tableKontakte.KontaktDatenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKontaktArt_UIDNull() As Boolean
            Return Me.IsNull(Me.tableKontakte.KontaktArt_UIDColumn)
        End Function
        
        Public Sub SetKontaktArt_UIDNull()
            Me(Me.tableKontakte.KontaktArt_UIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class AutorenRow
        Inherits System.Data.DataRow
        
        Private tableAutoren As AutorenDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoren = CType(Me.Table,AutorenDataTable)
        End Sub
        
        Public Property UID() As Integer
            Get
                Return CType(Me(Me.tableAutoren.UIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAutoren.UIDColumn) = value
            End Set
        End Property
        
        Public Property ScreenName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoren.ScreenNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoren.ScreenNameColumn) = value
            End Set
        End Property
        
        Public Property VorName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoren.VorNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoren.VorNameColumn) = value
            End Set
        End Property
        
        Public Property NachName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoren.NachNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoren.NachNameColumn) = value
            End Set
        End Property
        
        Public Property Geburtstag() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAutoren.GeburtstagColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoren.GeburtstagColumn) = value
            End Set
        End Property
        
        Public Property Passwort() As String
            Get
                Try 
                    Return CType(Me(Me.tableAutoren.PasswortColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoren.PasswortColumn) = value
            End Set
        End Property
        
        Public Function IsScreenNameNull() As Boolean
            Return Me.IsNull(Me.tableAutoren.ScreenNameColumn)
        End Function
        
        Public Sub SetScreenNameNull()
            Me(Me.tableAutoren.ScreenNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVorNameNull() As Boolean
            Return Me.IsNull(Me.tableAutoren.VorNameColumn)
        End Function
        
        Public Sub SetVorNameNull()
            Me(Me.tableAutoren.VorNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNachNameNull() As Boolean
            Return Me.IsNull(Me.tableAutoren.NachNameColumn)
        End Function
        
        Public Sub SetNachNameNull()
            Me(Me.tableAutoren.NachNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGeburtstagNull() As Boolean
            Return Me.IsNull(Me.tableAutoren.GeburtstagColumn)
        End Function
        
        Public Sub SetGeburtstagNull()
            Me(Me.tableAutoren.GeburtstagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswortNull() As Boolean
            Return Me.IsNull(Me.tableAutoren.PasswortColumn)
        End Function
        
        Public Sub SetPasswortNull()
            Me(Me.tableAutoren.PasswortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAdressenRows() As AdressenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AutorenAdressen")),AdressenRow())
        End Function
        
        Public Function GetKontakteRows() As KontakteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AutorenKontakte")),KontakteRow())
        End Function
    End Class
    
    Public Class AdressenRow
        Inherits System.Data.DataRow
        
        Private tableAdressen As AdressenDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdressen = CType(Me.Table,AdressenDataTable)
        End Sub
        
        Public Property UID() As Integer
            Get
                Return CType(Me(Me.tableAdressen.UIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAdressen.UIDColumn) = value
            End Set
        End Property
        
        Public Property Author_UID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.Author_UIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.Author_UIDColumn) = value
            End Set
        End Property
        
        Public Property Land() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.LandColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.LandColumn) = value
            End Set
        End Property
        
        Public Property PLZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.PLZColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.PLZColumn) = value
            End Set
        End Property
        
        Public Property Ort() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.OrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.OrtColumn) = value
            End Set
        End Property
        
        Public Property Strasse() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.StrasseColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.StrasseColumn) = value
            End Set
        End Property
        
        Public Property HausNummer() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.HausNummerColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.HausNummerColumn) = value
            End Set
        End Property
        
        Public Property AdressArt_UID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdressen.AdressArt_UIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressen.AdressArt_UIDColumn) = value
            End Set
        End Property
        
        Public Property AdressArtenRow() As AdressArtenRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdressArtenAdressen")),AdressArtenRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdressArtenAdressen"))
            End Set
        End Property
        
        Public Property AutorenRow() As AutorenRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AutorenAdressen")),AutorenRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AutorenAdressen"))
            End Set
        End Property
        
        Public Function IsAuthor_UIDNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.Author_UIDColumn)
        End Function
        
        Public Sub SetAuthor_UIDNull()
            Me(Me.tableAdressen.Author_UIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLandNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.LandColumn)
        End Function
        
        Public Sub SetLandNull()
            Me(Me.tableAdressen.LandColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPLZNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.PLZColumn)
        End Function
        
        Public Sub SetPLZNull()
            Me(Me.tableAdressen.PLZColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrtNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.OrtColumn)
        End Function
        
        Public Sub SetOrtNull()
            Me(Me.tableAdressen.OrtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStrasseNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.StrasseColumn)
        End Function
        
        Public Sub SetStrasseNull()
            Me(Me.tableAdressen.StrasseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHausNummerNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.HausNummerColumn)
        End Function
        
        Public Sub SetHausNummerNull()
            Me(Me.tableAdressen.HausNummerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdressArt_UIDNull() As Boolean
            Return Me.IsNull(Me.tableAdressen.AdressArt_UIDColumn)
        End Function
        
        Public Sub SetAdressArt_UIDNull()
            Me(Me.tableAdressen.AdressArt_UIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class KontaktArtenRow
        Inherits System.Data.DataRow
        
        Private tableKontaktArten As KontaktArtenDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKontaktArten = CType(Me.Table,KontaktArtenDataTable)
        End Sub
        
        Public Property UID() As Integer
            Get
                Return CType(Me(Me.tableKontaktArten.UIDColumn),Integer)
            End Get
            Set
                Me(Me.tableKontaktArten.UIDColumn) = value
            End Set
        End Property
        
        Public Property KontaktArt() As String
            Get
                Try 
                    Return CType(Me(Me.tableKontaktArten.KontaktArtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableKontaktArten.KontaktArtColumn) = value
            End Set
        End Property
        
        Public Function IsKontaktArtNull() As Boolean
            Return Me.IsNull(Me.tableKontaktArten.KontaktArtColumn)
        End Function
        
        Public Sub SetKontaktArtNull()
            Me(Me.tableKontaktArten.KontaktArtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetKontakteRows() As KontakteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("KontaktArtenKontakte")),KontakteRow())
        End Function
    End Class
    
    Public Class AdressArtenRow
        Inherits System.Data.DataRow
        
        Private tableAdressArten As AdressArtenDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdressArten = CType(Me.Table,AdressArtenDataTable)
        End Sub
        
        Public Property UID() As Integer
            Get
                Return CType(Me(Me.tableAdressArten.UIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAdressArten.UIDColumn) = value
            End Set
        End Property
        
        Public Property AdressArt() As String
            Get
                Try 
                    Return CType(Me(Me.tableAdressArten.AdressArtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableAdressArten.AdressArtColumn) = value
            End Set
        End Property
        
        Public Function IsAdressArtNull() As Boolean
            Return Me.IsNull(Me.tableAdressArten.AdressArtColumn)
        End Function
        
        Public Sub SetAdressArtNull()
            Me(Me.tableAdressArten.AdressArtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAdressenRows() As AdressenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdressArtenAdressen")),AdressenRow())
        End Function
    End Class
    
    Public Class KontakteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As KontakteRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As KontakteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As KontakteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class AutorenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AutorenRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As AutorenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As AutorenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class AdressenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AdressenRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As AdressenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As AdressenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class KontaktArtenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As KontaktArtenRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As KontaktArtenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As KontaktArtenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class AdressArtenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AdressArtenRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As AdressArtenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As AdressArtenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Public Interface IKontakteTableAdapter
    
    Function Fill(ByVal dataSet As DataDataSet) As Integer
    
    Function Fill(ByVal dataTable As DataDataSet.KontakteDataTable) As Integer
    
    Function GetData() As DataDataSet.KontakteDataTable
    
    Function Delete(ByVal p1 As Integer) As Integer
    
    Function Delete(ByVal p1 As Object) As Integer
    
    Function Insert(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As Integer) As Integer
    
    Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object) As Integer
    
    Function Update(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As Integer, ByVal p4 As Integer) As Integer
    
    Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object) As Integer
    
    Function Update(ByVal dataSet As DataDataSet) As Integer
    
    Function Update(ByVal dataTable As DataDataSet.KontakteDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class KontakteTableAdapter
    Inherits System.ComponentModel.Component
    Implements IKontakteTableAdapter
    
    Private m_DeleteCommand As System.Data.OleDb.OleDbCommand
    
    Private m_InsertCommand As System.Data.OleDb.OleDbCommand
    
    Private m_UpdateCommand As System.Data.OleDb.OleDbCommand
    
    Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
    
    Private m_connection As System.Data.OleDb.OleDbConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.OleDb.OleDbTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property DeleteCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_DeleteCommand Is Nothing) Then
                Me.InitDeleteCommand
            End If
            Return Me.m_DeleteCommand
        End Get
    End Property
    
    Private ReadOnly Property InsertCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_InsertCommand Is Nothing) Then
                Me.InitInsertCommand
            End If
            Return Me.m_InsertCommand
        End Get
    End Property
    
    Private ReadOnly Property UpdateCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_UpdateCommand Is Nothing) Then
                Me.InitUpdateCommand
            End If
            Return Me.m_UpdateCommand
        End Get
    End Property
    
    Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.OleDb.OleDbConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.OleDb.OleDbTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.OleDb.OleDbTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitDeleteCommand()
        Me.m_DeleteCommand = New System.Data.OleDb.OleDbCommand
        Me.m_DeleteCommand.Connection = Me.Connection
        Me.m_DeleteCommand.CommandText = "DELETE FROM `Kontakte` WHERE ((`UID` = ?))"
        Me.m_DeleteCommand.CommandType = System.Data.CommandType.Text
        Me.m_DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitInsertCommand()
        Me.m_InsertCommand = New System.Data.OleDb.OleDbCommand
        Me.m_InsertCommand.Connection = Me.Connection
        Me.m_InsertCommand.CommandText = "INSERT INTO `Kontakte` (`Autor_UID`, `KontaktDaten`, `KontaktArt_UID`) VALUES (?,"& _ 
            " ?, ?)"
        Me.m_InsertCommand.CommandType = System.Data.CommandType.Text
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
    End Sub
    
    Private Sub InitUpdateCommand()
        Me.m_UpdateCommand = New System.Data.OleDb.OleDbCommand
        Me.m_UpdateCommand.Connection = Me.Connection
        Me.m_UpdateCommand.CommandText = "UPDATE `Kontakte` SET `Autor_UID` = ?, `KontaktDaten` = ?, `KontaktArt_UID` = ? W"& _ 
            "HERE ((`UID` = ?))"
        Me.m_UpdateCommand.CommandType = System.Data.CommandType.Text
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Kontakte"
        tableMapping.ColumnMappings.Add("UID", "UID")
        tableMapping.ColumnMappings.Add("Autor_UID", "Autor_UID")
        tableMapping.ColumnMappings.Add("KontaktDaten", "KontaktDaten")
        tableMapping.ColumnMappings.Add("KontaktArt_UID", "KontaktArt_UID")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, Autor_UID, KontaktDaten, KontaktArt_UID FROM Kontakte"
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandText = "DELETE FROM `Kontakte` WHERE ((`UID` = ?) AND ((? = 1 AND `Autor_UID` IS NULL) OR"& _ 
            " (`Autor_UID` = ?)) AND ((? = 1 AND `KontaktDaten` IS NULL) OR (`KontaktDaten` ="& _ 
            " ?)) AND ((? = 1 AND `KontaktArt_UID` IS NULL) OR (`KontaktArt_UID` = ?)))"
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Original, false, Nothing))
        Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandText = "INSERT INTO `Kontakte` (`Autor_UID`, `KontaktDaten`, `KontaktArt_UID`) VALUES (?,"& _ 
            " ?, ?)"
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandText = "UPDATE `Kontakte` SET `Autor_UID` = ?, `KontaktDaten` = ?, `KontaktArt_UID` = ? W"& _ 
            "HERE ((`UID` = ?) AND ((? = 1 AND `Autor_UID` IS NULL) OR (`Autor_UID` = ?)) AND"& _ 
            " ((? = 1 AND `KontaktDaten` IS NULL) OR (`KontaktDaten` = ?)) AND ((? = 1 AND `K"& _ 
            "ontaktArt_UID` IS NULL) OR (`KontaktArt_UID` = ?)))"
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Autor_UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktDaten", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt_UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.OleDb.OleDbConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("Klassen.MySettings")
        Else
            settingsType = System.Type.GetType("Klassen.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Connection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, Autor_UID, KontaktDaten, KontaktArt_UID FROM Kontakte"
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As DataDataSet) As Integer Implements IKontakteTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.Kontakte.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As DataDataSet.KontakteDataTable) As Integer Implements IKontakteTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As DataDataSet.KontakteDataTable Implements IKontakteTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        Dim dataTable As DataDataSet.KontakteDataTable = New DataDataSet.KontakteDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Delete(ByVal p1 As Integer) As Integer Implements IKontakteTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
    Public Overloads Overridable Function Delete(ByVal p1 As Object) As Integer Implements IKontakteTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Insert(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As Integer) As Integer Implements IKontakteTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Integer)
        Me.InsertCommand.Parameters(1).Value = CType(p2,String)
        Me.InsertCommand.Parameters(2).Value = CType(p3,Integer)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
    Public Overloads Overridable Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object) As Integer Implements IKontakteTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Object)
        Me.InsertCommand.Parameters(1).Value = CType(p2,Object)
        Me.InsertCommand.Parameters(2).Value = CType(p3,Object)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As Integer, ByVal p4 As Integer) As Integer Implements IKontakteTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Integer)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,String)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,Integer)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,Integer)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
    Public Overloads Overridable Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object) As Integer Implements IKontakteTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Object)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Object)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,Object)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,Object)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As DataDataSet) As Integer Implements IKontakteTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "Kontakte")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As DataDataSet.KontakteDataTable) As Integer Implements IKontakteTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IKontakteTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IKontakteTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class

Public Interface IAutorenTableAdapter
    
    Function Fill(ByVal dataSet As DataDataSet) As Integer
    
    Function Fill(ByVal dataTable As DataDataSet.AutorenDataTable) As Integer
    
    Function GetData() As DataDataSet.AutorenDataTable
    
    Function Delete(ByVal p1 As Integer) As Integer
    
    Function Delete(ByVal p1 As Object) As Integer
    
    Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Date, ByVal p5 As String) As Integer
    
    Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object) As Integer
    
    Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Date, ByVal p5 As String, ByVal p6 As Integer) As Integer
    
    Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object) As Integer
    
    Function Update(ByVal dataSet As DataDataSet) As Integer
    
    Function Update(ByVal dataTable As DataDataSet.AutorenDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class AutorenTableAdapter
    Inherits System.ComponentModel.Component
    Implements IAutorenTableAdapter
    
    Private m_DeleteCommand As System.Data.OleDb.OleDbCommand
    
    Private m_InsertCommand As System.Data.OleDb.OleDbCommand
    
    Private m_UpdateCommand As System.Data.OleDb.OleDbCommand
    
    Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
    
    Private m_connection As System.Data.OleDb.OleDbConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.OleDb.OleDbTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property DeleteCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_DeleteCommand Is Nothing) Then
                Me.InitDeleteCommand
            End If
            Return Me.m_DeleteCommand
        End Get
    End Property
    
    Private ReadOnly Property InsertCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_InsertCommand Is Nothing) Then
                Me.InitInsertCommand
            End If
            Return Me.m_InsertCommand
        End Get
    End Property
    
    Private ReadOnly Property UpdateCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_UpdateCommand Is Nothing) Then
                Me.InitUpdateCommand
            End If
            Return Me.m_UpdateCommand
        End Get
    End Property
    
    Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.OleDb.OleDbConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.OleDb.OleDbTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.OleDb.OleDbTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitDeleteCommand()
        Me.m_DeleteCommand = New System.Data.OleDb.OleDbCommand
        Me.m_DeleteCommand.Connection = Me.Connection
        Me.m_DeleteCommand.CommandText = "DELETE FROM `Autoren` WHERE ((`UID` = ?))"
        Me.m_DeleteCommand.CommandType = System.Data.CommandType.Text
        Me.m_DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitInsertCommand()
        Me.m_InsertCommand = New System.Data.OleDb.OleDbCommand
        Me.m_InsertCommand.Connection = Me.Connection
        Me.m_InsertCommand.CommandText = "INSERT INTO `Autoren` (`ScreenName`, `VorName`, `NachName`, `Geburtstag`, `Passwo"& _ 
            "rt`) VALUES (?, ?, ?, ?, ?)"
        Me.m_InsertCommand.CommandType = System.Data.CommandType.Text
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Current, false, Nothing))
    End Sub
    
    Private Sub InitUpdateCommand()
        Me.m_UpdateCommand = New System.Data.OleDb.OleDbCommand
        Me.m_UpdateCommand.Connection = Me.Connection
        Me.m_UpdateCommand.CommandText = "UPDATE `Autoren` SET `ScreenName` = ?, `VorName` = ?, `NachName` = ?, `Geburtstag"& _ 
            "` = ?, `Passwort` = ? WHERE ((`UID` = ?))"
        Me.m_UpdateCommand.CommandType = System.Data.CommandType.Text
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Autoren"
        tableMapping.ColumnMappings.Add("UID", "UID")
        tableMapping.ColumnMappings.Add("ScreenName", "ScreenName")
        tableMapping.ColumnMappings.Add("VorName", "VorName")
        tableMapping.ColumnMappings.Add("NachName", "NachName")
        tableMapping.ColumnMappings.Add("Geburtstag", "Geburtstag")
        tableMapping.ColumnMappings.Add("Passwort", "Passwort")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, ScreenName, VorName, NachName, Geburtstag, Passwort FROM Autoren"
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandText = "DELETE FROM `Autoren` WHERE ((`UID` = ?) AND ((? = 1 AND `ScreenName` IS NULL) OR"& _ 
            " (`ScreenName` = ?)) AND ((? = 1 AND `VorName` IS NULL) OR (`VorName` = ?)) AND "& _ 
            "((? = 1 AND `NachName` IS NULL) OR (`NachName` = ?)) AND ((? = 1 AND `Geburtstag"& _ 
            "` IS NULL) OR (`Geburtstag` = ?)) AND ((? = 1 AND `Passwort` IS NULL) OR (`Passw"& _ 
            "ort` = ?)))"
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Original, false, Nothing))
        Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandText = "INSERT INTO `Autoren` (`ScreenName`, `VorName`, `NachName`, `Geburtstag`, `Passwo"& _ 
            "rt`) VALUES (?, ?, ?, ?, ?)"
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandText = "UPDATE `Autoren` SET `ScreenName` = ?, `VorName` = ?, `NachName` = ?, `Geburtstag"& _ 
            "` = ?, `Passwort` = ? WHERE ((`UID` = ?) AND ((? = 1 AND `ScreenName` IS NULL) O"& _ 
            "R (`ScreenName` = ?)) AND ((? = 1 AND `VorName` IS NULL) OR (`VorName` = ?)) AND"& _ 
            " ((? = 1 AND `NachName` IS NULL) OR (`NachName` = ?)) AND ((? = 1 AND `Geburtsta"& _ 
            "g` IS NULL) OR (`Geburtstag` = ?)) AND ((? = 1 AND `Passwort` IS NULL) OR (`Pass"& _ 
            "wort` = ?)))"
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ScreenName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VorName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NachName", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Geburtstag", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Passwort", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.OleDb.OleDbConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("Klassen.MySettings")
        Else
            settingsType = System.Type.GetType("Klassen.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Connection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, ScreenName, VorName, NachName, Geburtstag, Passwort FROM Autoren"
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As DataDataSet) As Integer Implements IAutorenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.Autoren.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As DataDataSet.AutorenDataTable) As Integer Implements IAutorenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As DataDataSet.AutorenDataTable Implements IAutorenTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        Dim dataTable As DataDataSet.AutorenDataTable = New DataDataSet.AutorenDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Delete(ByVal p1 As Integer) As Integer Implements IAutorenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
    Public Overloads Overridable Function Delete(ByVal p1 As Object) As Integer Implements IAutorenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Date, ByVal p5 As String) As Integer Implements IAutorenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,String)
        Me.InsertCommand.Parameters(1).Value = CType(p2,String)
        Me.InsertCommand.Parameters(2).Value = CType(p3,String)
        Me.InsertCommand.Parameters(3).Value = CType(p4,Date)
        Me.InsertCommand.Parameters(4).Value = CType(p5,String)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
    Public Overloads Overridable Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object) As Integer Implements IAutorenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Object)
        Me.InsertCommand.Parameters(1).Value = CType(p2,Object)
        Me.InsertCommand.Parameters(2).Value = CType(p3,Object)
        Me.InsertCommand.Parameters(3).Value = CType(p4,Object)
        Me.InsertCommand.Parameters(4).Value = CType(p5,Object)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Date, ByVal p5 As String, ByVal p6 As Integer) As Integer Implements IAutorenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,String)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,String)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,String)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,Date)
        Me.UpdateCommand.Parameters(4).Value = CType(p5,String)
        Me.UpdateCommand.Parameters(5).Value = CType(p6,Integer)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
    Public Overloads Overridable Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object) As Integer Implements IAutorenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Object)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Object)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,Object)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,Object)
        Me.UpdateCommand.Parameters(4).Value = CType(p5,Object)
        Me.UpdateCommand.Parameters(5).Value = CType(p6,Object)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As DataDataSet) As Integer Implements IAutorenTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "Autoren")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As DataDataSet.AutorenDataTable) As Integer Implements IAutorenTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IAutorenTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IAutorenTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class

Public Interface IAdressenTableAdapter
    
    Function Fill(ByVal dataSet As DataDataSet) As Integer
    
    Function Fill(ByVal dataTable As DataDataSet.AdressenDataTable) As Integer
    
    Function GetData() As DataDataSet.AdressenDataTable
    
    Function Delete(ByVal p1 As Integer) As Integer
    
    Function Delete(ByVal p1 As Object) As Integer
    
    Function Insert(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Integer) As Integer
    
    Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object, ByVal p7 As Object) As Integer
    
    Function Update(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Integer, ByVal p8 As Integer) As Integer
    
    Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object, ByVal p7 As Object, ByVal p8 As Object) As Integer
    
    Function Update(ByVal dataSet As DataDataSet) As Integer
    
    Function Update(ByVal dataTable As DataDataSet.AdressenDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class AdressenTableAdapter
    Inherits System.ComponentModel.Component
    Implements IAdressenTableAdapter
    
    Private m_DeleteCommand As System.Data.OleDb.OleDbCommand
    
    Private m_InsertCommand As System.Data.OleDb.OleDbCommand
    
    Private m_UpdateCommand As System.Data.OleDb.OleDbCommand
    
    Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
    
    Private m_connection As System.Data.OleDb.OleDbConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.OleDb.OleDbTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property DeleteCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_DeleteCommand Is Nothing) Then
                Me.InitDeleteCommand
            End If
            Return Me.m_DeleteCommand
        End Get
    End Property
    
    Private ReadOnly Property InsertCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_InsertCommand Is Nothing) Then
                Me.InitInsertCommand
            End If
            Return Me.m_InsertCommand
        End Get
    End Property
    
    Private ReadOnly Property UpdateCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_UpdateCommand Is Nothing) Then
                Me.InitUpdateCommand
            End If
            Return Me.m_UpdateCommand
        End Get
    End Property
    
    Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.OleDb.OleDbConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.OleDb.OleDbTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.OleDb.OleDbTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitDeleteCommand()
        Me.m_DeleteCommand = New System.Data.OleDb.OleDbCommand
        Me.m_DeleteCommand.Connection = Me.Connection
        Me.m_DeleteCommand.CommandText = "DELETE FROM `Adressen` WHERE ((`UID` = ?))"
        Me.m_DeleteCommand.CommandType = System.Data.CommandType.Text
        Me.m_DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitInsertCommand()
        Me.m_InsertCommand = New System.Data.OleDb.OleDbCommand
        Me.m_InsertCommand.Connection = Me.Connection
        Me.m_InsertCommand.CommandText = "INSERT INTO `Adressen` (`Author_UID`, `Land`, `PLZ`, `Ort`, `Strasse`, `HausNumme"& _ 
            "r`, `AdressArt_UID`) VALUES (?, ?, ?, ?, ?, ?, ?)"
        Me.m_InsertCommand.CommandType = System.Data.CommandType.Text
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
    End Sub
    
    Private Sub InitUpdateCommand()
        Me.m_UpdateCommand = New System.Data.OleDb.OleDbCommand
        Me.m_UpdateCommand.Connection = Me.Connection
        Me.m_UpdateCommand.CommandText = "UPDATE `Adressen` SET `Author_UID` = ?, `Land` = ?, `PLZ` = ?, `Ort` = ?, `Strass"& _ 
            "e` = ?, `HausNummer` = ?, `AdressArt_UID` = ? WHERE ((`UID` = ?))"
        Me.m_UpdateCommand.CommandType = System.Data.CommandType.Text
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Adressen"
        tableMapping.ColumnMappings.Add("UID", "UID")
        tableMapping.ColumnMappings.Add("Author_UID", "Author_UID")
        tableMapping.ColumnMappings.Add("Land", "Land")
        tableMapping.ColumnMappings.Add("PLZ", "PLZ")
        tableMapping.ColumnMappings.Add("Ort", "Ort")
        tableMapping.ColumnMappings.Add("Strasse", "Strasse")
        tableMapping.ColumnMappings.Add("HausNummer", "HausNummer")
        tableMapping.ColumnMappings.Add("AdressArt_UID", "AdressArt_UID")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, Author_UID, Land, PLZ, Ort, Strasse, HausNummer, AdressArt_UID FROM A"& _ 
            "dressen"
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandText = "DELETE FROM `Adressen` WHERE ((`UID` = ?) AND ((? = 1 AND `Author_UID` IS NULL) O"& _ 
            "R (`Author_UID` = ?)) AND ((? = 1 AND `Land` IS NULL) OR (`Land` = ?)) AND ((? ="& _ 
            " 1 AND `PLZ` IS NULL) OR (`PLZ` = ?)) AND ((? = 1 AND `Ort` IS NULL) OR (`Ort` ="& _ 
            " ?)) AND ((? = 1 AND `Strasse` IS NULL) OR (`Strasse` = ?)) AND ((? = 1 AND `Hau"& _ 
            "sNummer` IS NULL) OR (`HausNummer` = ?)) AND ((? = 1 AND `AdressArt_UID` IS NULL"& _ 
            ") OR (`AdressArt_UID` = ?)))"
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Original, false, Nothing))
        Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandText = "INSERT INTO `Adressen` (`Author_UID`, `Land`, `PLZ`, `Ort`, `Strasse`, `HausNumme"& _ 
            "r`, `AdressArt_UID`) VALUES (?, ?, ?, ?, ?, ?, ?)"
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandText = "UPDATE `Adressen` SET `Author_UID` = ?, `Land` = ?, `PLZ` = ?, `Ort` = ?, `Strass"& _ 
            "e` = ?, `HausNummer` = ?, `AdressArt_UID` = ? WHERE ((`UID` = ?) AND ((? = 1 AND"& _ 
            " `Author_UID` IS NULL) OR (`Author_UID` = ?)) AND ((? = 1 AND `Land` IS NULL) OR"& _ 
            " (`Land` = ?)) AND ((? = 1 AND `PLZ` IS NULL) OR (`PLZ` = ?)) AND ((? = 1 AND `O"& _ 
            "rt` IS NULL) OR (`Ort` = ?)) AND ((? = 1 AND `Strasse` IS NULL) OR (`Strasse` = "& _ 
            "?)) AND ((? = 1 AND `HausNummer` IS NULL) OR (`HausNummer` = ?)) AND ((? = 1 AND"& _ 
            " `AdressArt_UID` IS NULL) OR (`AdressArt_UID` = ?)))"
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Author_UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Land", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLZ", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Ort", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Strasse", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HausNummer", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt_UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.OleDb.OleDbConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("Klassen.MySettings")
        Else
            settingsType = System.Type.GetType("Klassen.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Connection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, Author_UID, Land, PLZ, Ort, Strasse, HausNummer, AdressArt_UID FROM A"& _ 
            "dressen"
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As DataDataSet) As Integer Implements IAdressenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.Adressen.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As DataDataSet.AdressenDataTable) As Integer Implements IAdressenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As DataDataSet.AdressenDataTable Implements IAdressenTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        Dim dataTable As DataDataSet.AdressenDataTable = New DataDataSet.AdressenDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Delete(ByVal p1 As Integer) As Integer Implements IAdressenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
    Public Overloads Overridable Function Delete(ByVal p1 As Object) As Integer Implements IAdressenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Insert(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Integer) As Integer Implements IAdressenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Integer)
        Me.InsertCommand.Parameters(1).Value = CType(p2,String)
        Me.InsertCommand.Parameters(2).Value = CType(p3,String)
        Me.InsertCommand.Parameters(3).Value = CType(p4,String)
        Me.InsertCommand.Parameters(4).Value = CType(p5,String)
        Me.InsertCommand.Parameters(5).Value = CType(p6,String)
        Me.InsertCommand.Parameters(6).Value = CType(p7,Integer)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
    Public Overloads Overridable Function Insert(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object, ByVal p7 As Object) As Integer Implements IAdressenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Object)
        Me.InsertCommand.Parameters(1).Value = CType(p2,Object)
        Me.InsertCommand.Parameters(2).Value = CType(p3,Object)
        Me.InsertCommand.Parameters(3).Value = CType(p4,Object)
        Me.InsertCommand.Parameters(4).Value = CType(p5,Object)
        Me.InsertCommand.Parameters(5).Value = CType(p6,Object)
        Me.InsertCommand.Parameters(6).Value = CType(p7,Object)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal p1 As Integer, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As Integer, ByVal p8 As Integer) As Integer Implements IAdressenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Integer)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,String)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,String)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,String)
        Me.UpdateCommand.Parameters(4).Value = CType(p5,String)
        Me.UpdateCommand.Parameters(5).Value = CType(p6,String)
        Me.UpdateCommand.Parameters(6).Value = CType(p7,Integer)
        Me.UpdateCommand.Parameters(7).Value = CType(p8,Integer)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
    Public Overloads Overridable Function Update(ByVal p1 As Object, ByVal p2 As Object, ByVal p3 As Object, ByVal p4 As Object, ByVal p5 As Object, ByVal p6 As Object, ByVal p7 As Object, ByVal p8 As Object) As Integer Implements IAdressenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Object)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Object)
        Me.UpdateCommand.Parameters(2).Value = CType(p3,Object)
        Me.UpdateCommand.Parameters(3).Value = CType(p4,Object)
        Me.UpdateCommand.Parameters(4).Value = CType(p5,Object)
        Me.UpdateCommand.Parameters(5).Value = CType(p6,Object)
        Me.UpdateCommand.Parameters(6).Value = CType(p7,Object)
        Me.UpdateCommand.Parameters(7).Value = CType(p8,Object)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As DataDataSet) As Integer Implements IAdressenTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "Adressen")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As DataDataSet.AdressenDataTable) As Integer Implements IAdressenTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IAdressenTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IAdressenTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class

Public Interface IKontaktArtenTableAdapter
    
    Function Fill(ByVal dataSet As DataDataSet) As Integer
    
    Function Fill(ByVal dataTable As DataDataSet.KontaktArtenDataTable) As Integer
    
    Function GetData() As DataDataSet.KontaktArtenDataTable
    
    Function Delete(ByVal p1 As Integer) As Integer
    
    Function Delete(ByVal p1 As Object) As Integer
    
    Function Insert(ByVal p1 As String) As Integer
    
    Function Insert(ByVal p1 As Object) As Integer
    
    Function Update(ByVal p1 As String, ByVal p2 As Integer) As Integer
    
    Function Update(ByVal p1 As Object, ByVal p2 As Object) As Integer
    
    Function Update(ByVal dataSet As DataDataSet) As Integer
    
    Function Update(ByVal dataTable As DataDataSet.KontaktArtenDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class KontaktArtenTableAdapter
    Inherits System.ComponentModel.Component
    Implements IKontaktArtenTableAdapter
    
    Private m_DeleteCommand As System.Data.OleDb.OleDbCommand
    
    Private m_InsertCommand As System.Data.OleDb.OleDbCommand
    
    Private m_UpdateCommand As System.Data.OleDb.OleDbCommand
    
    Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
    
    Private m_connection As System.Data.OleDb.OleDbConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.OleDb.OleDbTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property DeleteCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_DeleteCommand Is Nothing) Then
                Me.InitDeleteCommand
            End If
            Return Me.m_DeleteCommand
        End Get
    End Property
    
    Private ReadOnly Property InsertCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_InsertCommand Is Nothing) Then
                Me.InitInsertCommand
            End If
            Return Me.m_InsertCommand
        End Get
    End Property
    
    Private ReadOnly Property UpdateCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_UpdateCommand Is Nothing) Then
                Me.InitUpdateCommand
            End If
            Return Me.m_UpdateCommand
        End Get
    End Property
    
    Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.OleDb.OleDbConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.OleDb.OleDbTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.OleDb.OleDbTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitDeleteCommand()
        Me.m_DeleteCommand = New System.Data.OleDb.OleDbCommand
        Me.m_DeleteCommand.Connection = Me.Connection
        Me.m_DeleteCommand.CommandText = "DELETE FROM `KontaktArten` WHERE ((`UID` = ?))"
        Me.m_DeleteCommand.CommandType = System.Data.CommandType.Text
        Me.m_DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitInsertCommand()
        Me.m_InsertCommand = New System.Data.OleDb.OleDbCommand
        Me.m_InsertCommand.Connection = Me.Connection
        Me.m_InsertCommand.CommandText = "INSERT INTO `KontaktArten` (`KontaktArt`) VALUES (?)"
        Me.m_InsertCommand.CommandType = System.Data.CommandType.Text
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Current, false, Nothing))
    End Sub
    
    Private Sub InitUpdateCommand()
        Me.m_UpdateCommand = New System.Data.OleDb.OleDbCommand
        Me.m_UpdateCommand.Connection = Me.Connection
        Me.m_UpdateCommand.CommandText = "UPDATE `KontaktArten` SET `KontaktArt` = ? WHERE ((`UID` = ?))"
        Me.m_UpdateCommand.CommandType = System.Data.CommandType.Text
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "KontaktArten"
        tableMapping.ColumnMappings.Add("UID", "UID")
        tableMapping.ColumnMappings.Add("KontaktArt", "KontaktArt")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, KontaktArt FROM KontaktArten"
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandText = "DELETE FROM `KontaktArten` WHERE ((`UID` = ?) AND ((? = 1 AND `KontaktArt` IS NUL"& _ 
            "L) OR (`KontaktArt` = ?)))"
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Original, false, Nothing))
        Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandText = "INSERT INTO `KontaktArten` (`KontaktArt`) VALUES (?)"
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandText = "UPDATE `KontaktArten` SET `KontaktArt` = ? WHERE ((`UID` = ?) AND ((? = 1 AND `Ko"& _ 
            "ntaktArt` IS NULL) OR (`KontaktArt` = ?)))"
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "KontaktArt", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.OleDb.OleDbConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("Klassen.MySettings")
        Else
            settingsType = System.Type.GetType("Klassen.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Connection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, KontaktArt FROM KontaktArten"
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As DataDataSet) As Integer Implements IKontaktArtenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.KontaktArten.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As DataDataSet.KontaktArtenDataTable) As Integer Implements IKontaktArtenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As DataDataSet.KontaktArtenDataTable Implements IKontaktArtenTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        Dim dataTable As DataDataSet.KontaktArtenDataTable = New DataDataSet.KontaktArtenDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Delete(ByVal p1 As Integer) As Integer Implements IKontaktArtenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
    Public Overloads Overridable Function Delete(ByVal p1 As Object) As Integer Implements IKontaktArtenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Insert(ByVal p1 As String) As Integer Implements IKontaktArtenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,String)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
    Public Overloads Overridable Function Insert(ByVal p1 As Object) As Integer Implements IKontaktArtenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Integer) As Integer Implements IKontaktArtenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,String)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Integer)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
    Public Overloads Overridable Function Update(ByVal p1 As Object, ByVal p2 As Object) As Integer Implements IKontaktArtenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Object)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Object)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As DataDataSet) As Integer Implements IKontaktArtenTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "KontaktArten")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As DataDataSet.KontaktArtenDataTable) As Integer Implements IKontaktArtenTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IKontaktArtenTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IKontaktArtenTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class

Public Interface IAdressArtenTableAdapter
    
    Function Fill(ByVal dataSet As DataDataSet) As Integer
    
    Function Fill(ByVal dataTable As DataDataSet.AdressArtenDataTable) As Integer
    
    Function GetData() As DataDataSet.AdressArtenDataTable
    
    Function Delete(ByVal p1 As Integer) As Integer
    
    Function Delete(ByVal p1 As Object) As Integer
    
    Function Insert(ByVal p1 As String) As Integer
    
    Function Insert(ByVal p1 As Object) As Integer
    
    Function Update(ByVal p1 As String, ByVal p2 As Integer) As Integer
    
    Function Update(ByVal p1 As Object, ByVal p2 As Object) As Integer
    
    Function Update(ByVal dataSet As DataDataSet) As Integer
    
    Function Update(ByVal dataTable As DataDataSet.AdressArtenDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class AdressArtenTableAdapter
    Inherits System.ComponentModel.Component
    Implements IAdressArtenTableAdapter
    
    Private m_DeleteCommand As System.Data.OleDb.OleDbCommand
    
    Private m_InsertCommand As System.Data.OleDb.OleDbCommand
    
    Private m_UpdateCommand As System.Data.OleDb.OleDbCommand
    
    Private WithEvents m_adapter As System.Data.OleDb.OleDbDataAdapter
    
    Private m_connection As System.Data.OleDb.OleDbConnection
    
    Private m_commandCollection() As System.Data.IDbCommand
    
    Private m_transaction As System.Data.OleDb.OleDbTransaction
    
    Private m_clearBeforeFill As Boolean = true
    
    Private ReadOnly Property DeleteCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_DeleteCommand Is Nothing) Then
                Me.InitDeleteCommand
            End If
            Return Me.m_DeleteCommand
        End Get
    End Property
    
    Private ReadOnly Property InsertCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_InsertCommand Is Nothing) Then
                Me.InitInsertCommand
            End If
            Return Me.m_InsertCommand
        End Get
    End Property
    
    Private ReadOnly Property UpdateCommand() As System.Data.OleDb.OleDbCommand
        Get
            If (Me.m_UpdateCommand Is Nothing) Then
                Me.InitUpdateCommand
            End If
            Return Me.m_UpdateCommand
        End Get
    End Property
    
    Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
        Get
            If (Me.m_adapter Is Nothing) Then
                Me.InitAdapter
            End If
            Return Me.m_adapter
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.OleDb.OleDbConnection
        Get
            If (Me.m_connection Is Nothing) Then
                Me.InitConnection
            End If
            Return Me.m_connection
        End Get
    End Property
    
    Friend ReadOnly Property CommandCollection() As System.Data.IDbCommand()
        Get
            If (Me.m_commandCollection Is Nothing) Then
                Me.InitCommandCollection
            End If
            Return Me.m_commandCollection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.OleDb.OleDbTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.OleDb.OleDbTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction Is oldTransaction) Then
                    CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                If (Me.Adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                If (Me.Adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.Adapter) Is Nothing)  _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                If (Me.Adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.Adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitDeleteCommand()
        Me.m_DeleteCommand = New System.Data.OleDb.OleDbCommand
        Me.m_DeleteCommand.Connection = Me.Connection
        Me.m_DeleteCommand.CommandText = "DELETE FROM `AdressArten` WHERE ((`UID` = ?))"
        Me.m_DeleteCommand.CommandType = System.Data.CommandType.Text
        Me.m_DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitInsertCommand()
        Me.m_InsertCommand = New System.Data.OleDb.OleDbCommand
        Me.m_InsertCommand.Connection = Me.Connection
        Me.m_InsertCommand.CommandText = "INSERT INTO `AdressArten` (`AdressArt`) VALUES (?)"
        Me.m_InsertCommand.CommandType = System.Data.CommandType.Text
        Me.m_InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Current, false, Nothing))
    End Sub
    
    Private Sub InitUpdateCommand()
        Me.m_UpdateCommand = New System.Data.OleDb.OleDbCommand
        Me.m_UpdateCommand.Connection = Me.Connection
        Me.m_UpdateCommand.CommandText = "UPDATE `AdressArten` SET `AdressArt` = ? WHERE ((`UID` = ?))"
        Me.m_UpdateCommand.CommandType = System.Data.CommandType.Text
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitAdapter()
        Me.m_adapter = New System.Data.OleDb.OleDbDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "AdressArten"
        tableMapping.ColumnMappings.Add("UID", "UID")
        tableMapping.ColumnMappings.Add("AdressArt", "AdressArt")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_adapter.SelectCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, AdressArt FROM AdressArten"
        CType(Me.m_adapter.SelectCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        Me.m_adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandText = "DELETE FROM `AdressArten` WHERE ((`UID` = ?) AND ((? = 1 AND `AdressArt` IS NULL)"& _ 
            " OR (`AdressArt` = ?)))"
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.DeleteCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Original, false, Nothing))
        Me.m_adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandText = "INSERT INTO `AdressArten` (`AdressArt`) VALUES (?)"
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.InsertCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Current, false, Nothing))
        Me.m_adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandText = "UPDATE `AdressArten` SET `AdressArt` = ? WHERE ((`UID` = ?) AND ((? = 1 AND `Adre"& _ 
            "ssArt` IS NULL) OR (`AdressArt` = ?)))"
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Current, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UID", System.Data.DataRowVersion.Original, false, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Original, true, Nothing))
        CType(Me.m_adapter.UpdateCommand,System.Data.OleDb.OleDbCommand).Parameters.Add(New System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AdressArt", System.Data.DataRowVersion.Original, false, Nothing))
    End Sub
    
    Private Sub InitConnection()
        Me.m_connection = New System.Data.OleDb.OleDbConnection
        Dim csValue As String = Nothing
        Dim settingsType As System.Type = Nothing
        Dim trs As System.ComponentModel.Design.ITypeResolutionService = Nothing
        If (Not (Me.Site) Is Nothing) Then
            trs = CType(Me.Site.GetService(GetType(System.ComponentModel.Design.ITypeResolutionService)),System.ComponentModel.Design.ITypeResolutionService)
        End If
        If (Not (trs) Is Nothing) Then
            settingsType = trs.GetType("Klassen.MySettings")
        Else
            settingsType = System.Type.GetType("Klassen.MySettings")
        End If
        If (Not (settingsType) Is Nothing) Then
            Dim diProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Value")
            Dim csProperty As System.Reflection.PropertyInfo = settingsType.GetProperty("Connection")
            Dim diValue As Object = diProperty.GetValue(Nothing, Nothing)
            csValue = csProperty.GetValue(diValue, Nothing).ToString
        End If
        Me.m_connection.ConnectionString = csValue
    End Sub
    
    Private Sub InitCommandCollection()
        Me.m_commandCollection = New System.Data.IDbCommand(0) {}
        Me.m_commandCollection(0) = New System.Data.OleDb.OleDbCommand
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).Connection = Me.Connection
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandText = "SELECT UID, AdressArt FROM AdressArten"
        CType(Me.m_commandCollection(0),System.Data.OleDb.OleDbCommand).CommandType = System.Data.CommandType.Text
    End Sub
    
    Public Overloads Overridable Function Fill(ByVal dataSet As DataDataSet) As Integer Implements IAdressArtenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.AdressArten.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataSet)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As DataDataSet.AdressArtenDataTable) As Integer Implements IAdressArtenTableAdapter.Fill
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As DataDataSet.AdressArtenDataTable Implements IAdressArtenTableAdapter.GetData
        Me.Adapter.SelectCommand = CType(Me.CommandCollection(0),System.Data.OleDb.OleDbCommand)
        Dim dataTable As DataDataSet.AdressArtenDataTable = New DataDataSet.AdressArtenDataTable
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    Public Overloads Overridable Function Delete(ByVal p1 As Integer) As Integer Implements IAdressArtenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Integer)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
    Public Overloads Overridable Function Delete(ByVal p1 As Object) As Integer Implements IAdressArtenTableAdapter.Delete
        Me.DeleteCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.DeleteCommand.Connection.Open
            Return Me.DeleteCommand.ExecuteNonQuery
        Finally
            Me.DeleteCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Insert(ByVal p1 As String) As Integer Implements IAdressArtenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,String)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
    Public Overloads Overridable Function Insert(ByVal p1 As Object) As Integer Implements IAdressArtenTableAdapter.Insert
        Me.InsertCommand.Parameters(0).Value = CType(p1,Object)
        Try 
            Me.InsertCommand.Connection.Open
            Return Me.InsertCommand.ExecuteNonQuery
        Finally
            Me.InsertCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Integer) As Integer Implements IAdressArtenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,String)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Integer)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
    Public Overloads Overridable Function Update(ByVal p1 As Object, ByVal p2 As Object) As Integer Implements IAdressArtenTableAdapter.Update
        Me.UpdateCommand.Parameters(0).Value = CType(p1,Object)
        Me.UpdateCommand.Parameters(1).Value = CType(p2,Object)
        Try 
            Me.UpdateCommand.Connection.Open
            Return Me.UpdateCommand.ExecuteNonQuery
        Finally
            Me.UpdateCommand.Connection.Close
        End Try
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataSet As DataDataSet) As Integer Implements IAdressArtenTableAdapter.Update
        Return Me.Adapter.Update(dataSet, "AdressArten")
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataTable As DataDataSet.AdressArtenDataTable) As Integer Implements IAdressArtenTableAdapter.Update
        Return Me.Adapter.Update(dataTable)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IAdressArtenTableAdapter.Update
        Return Me.Adapter.Update(dataRows)
    End Function
    
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IAdressArtenTableAdapter.Update
        Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class
