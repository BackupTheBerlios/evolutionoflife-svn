expdef:
name:Foodchain
info:~
Three populations:
- Prey
- Predators
- Food

Prey eats food. Food is grown at constant rate.
Predators fights with prey, and eats dead prey.

NEW FEATURES:
1. User fields are now vectors.
- reading an element from a vector:
second element of user field 2 -> Creature.user2.get(1);
- writing an element to a vector:
write "bla" to second element of user field 2 -> Creature.user2.set(1, "bla");

User1 is used for information about the individuals that is static during life. Like population number and generation.
User2 is used for information about the individuals life. E.g. total energy consumed, number of fights, number of offspring
User3 is used for dynamic values that chamge during life, and are only used within the expdef: e.g. wait after fight, wait after reproduction.

2. Prey can 'die' twice.
After several fights with predators, prey creatures become inanimate (neural net is disabled).
After this, they can be eaten by predators and die again when all energy is consumed from them.

Author:
Walter de Back - walter@aisland.org
Virtual Life lab - Utrecht University
April 2004
~
code:~

// >>>>>>> Load experiment definition.
// >>>>>>> This methods is called from the parameter window of GUI when with 'apply' or 'reload'.
global foodwait;

function onExpDefLoad()
{

// Clear and create two genepools into the GenotypeLibrary
if (GenotypeLibrary.groupcount != 0) GenotypeLibrary.clear();
GenotypeLibrary.clearGroup(0);
GenotypeGroup.name="Genepool Prey";	// The first always exist, and just needs to be named.
GenotypeGroup.fitness="return this.user2.get(2);";
GenotypeLibrary.addGroup("Genepool Predators");  // The second genepool must first be added, and named.
GenotypeGroup.fitness="return this.user2.get(2);";

// Clear and created three populations in the LiveLibrary 
if (LiveLibrary.groupcount != 0) LiveLibrary.clear();
LiveLibrary.clearGroup(0);
CreaturesGroup.name="Prey";		// the first always exist, and just needs to be named.
CreaturesGroup.nnsim=1;			// Neural net simulation is turned on for this group.
CreaturesGroup.em_dyn=0.001;
CreaturesGroup.em_stat=0.002;
CreaturesGroup.enableperf=1;		// Performance evaluation is turned on.
CreaturesGroup.colmask=5; 		// Collision mask is set to 1 (Standard) + 4 (Custom handler)=5.
					// Standard handler is mechanical bounce.
					// Custom collision handler calls onACollision() method below.

LiveLibrary.addGroup("Predators");	// Add a second creatures group.
CreaturesGroup.nnsim=1;			// Neural net simulation is turned on.
CreaturesGroup.em_dyn=0.001;
CreaturesGroup.em_stat=0.002;
CreaturesGroup.enableperf=1;		// Performance evaluation is enabled.
CreaturesGroup.colmask=5;		// Collision mask set to Standard.

LiveLibrary.addGroup("Food");		// Add a third population.
CreaturesGroup.nnsim=0;			// Neural net is turned off (individuals are not animated).
CreaturesGroup.enableperf=0;		// Performance is not evaluated.
CreaturesGroup.energy=1;
CreaturesGroup.death=0;
CreaturesGroup.colmask=5;  		// Collision mask set to 4 (no standard, only custom handler).

// >>>>>>> Define experiment parameters, instantiation and initialization
// >>>>>>> These can appear in the Parameter window in GUI, see on bottom of experiment definition

ExpParams.paramfile="foodchain.sim";
ExpParams.genefile="foodchain.gen";

ExpParams.autorestart=1;	// Automatic restart at extinction (0 or 1).
ExpState.totaltestedcr=0;	// Keeps track of total tested creatures.
ExpParams.creath=0;		// Height at which creatures are spawned.

ExpParams.numberPrey=20;	// Number of prey creatures in population 0.
ExpParams.numberPred=5;	// Number of predator creatures in population 1.
ExpParams.p_mut=100;		// Probability of mutation.
ExpParams.Energy0=1000;		// Starting energy.
ExpParams.e_meta=0.001;		// Metabolistic energy (substracted for each stick each step)
ExpParams.aging=50000;		// Aging level, metabolic energy grows with age (doubled at this level).


ExpParams.reprEnergy=750;	// Reproductive energy (individuals can only reproduce above this level).
ExpParams.reprLifespan=1000;	// Reproductive age (individuals can only reproduce above this age).
ExpParams.waitFight=200;
ExpParams.waitMate=300;

ExpParams.feedrate=250;		// Rate at which new food parts are added to the world per step.
ExpParams.foodgrowth=0.01;	// Rate at which food parts grow (gain energy).
ExpParams.maxfoodenergy=500;	// Maximum energy per food part.
ExpParams.maxfoodparts=100;	// Maximum number of food parts.
ExpParams.feedtrans=0.001;	// Transferral of energy per step from food part to creature
ExpParams.feedtranspred=0.01;	// Transferral of energy per step from food part to creature
ExpParams.foodgen="";		// Genotype of standard food part.

foodwait=0;
}

// <<<<<<<

// >>>>>>> Initialize experiment. This is called from GUI when 'Initialise' is pressed.
// >>>>>>> Fills populations with creatures.

function onExpInit()
{
// Clear content of genepools (before loading genotypes)
GenotypeLibrary.clearGroup(0);
GenotypeLibrary.clearGroup(1);

// Clear content of population groups
LiveLibrary.clearGroup(0);					
LiveLibrary.clearGroup(1);					
LiveLibrary.clearGroup(2);					

// Load parameter (*.sim) file and genotype (*.gen) file.
sim_params.import(ExpParams.paramfile, 4);

//GenotypeLibrary.getGroup(1);
sim_params.import(ExpParams.genefile, 2);  
					   // The genotype file should contain 2 genotypes:
					   // The first is the ancestor of first population,
			   		   // The second is the ancestor of second population.
					   // Other genotype that may be in file will not be used!

// The genotypes are always loaded into the first genepool. 
// Here, we copy the second genotype to the second genepool, and remove the second in the first genepool.
// This results in one genotype in each of the two genepools.
GenotypeLibrary.genotype=GenotypeLibrary.getGroup(0).getGenotype(1);
GenotypeLibrary.copyGenotype(1);
GenotypeLibrary.genotype=GenotypeLibrary.getGroup(0).getGenotype(1);
GenotypeLibrary.delGenotype();

// Fill two groups with creatures
var i=0;
while(i < (LiveLibrary.groupcount() - 1))  // This loop is called two times: number of groups - food pop.
{
LiveLibrary.group=i;	// This selects the i-th population. 
			// This pop will be used during the rest of the method, 
			// until another is selected.

Simulator.print("POPULATION CREATION: pop nr. "+i); // Print message to GUI message window.

	var numberCreatures;
	if(i==0) numberCreatures = ExpParams.numberPrey;
	else if(i==1) numberCreatures = ExpParams.numberPred;

	var j=0;
	while(j < numberCreatures)	// This loop is called once for every creature.
	{
		var mutant;			
		var newcreature;
		GenotypeLibrary.group=i;
		// Get genotype from genepool on location corresponding to the population index i.
		GenotypeLibrary.genotype=GenotypeGroup.getGenotype(0);
		// Mutate this genotype.
		mutant=GenotypeLibrary.mutate(GenotypeLibrary.genotype);
//		Simulator.print("mutant: "+mutant);
		// Create creature object from mutated genotype object.
		newcreature = LiveLibrary.getGroup(i).createFromGenotype(mutant);
//		Simulator.print("newcreature: "+newcreature);
		// Extend the creatures name with index j.
		newcreature.name=newcreature.name+"_"+(j+1);
		// Print message to GUI message window.
//		Simulator.print("TEAMBUILDER: "+Creature.name(newcreature));	
		// Assign population number to user field 1 (starting from 0).

		// NEW !! USER FIELDS ARE VECTORS!

		// USER FIELD 1 CONTAINS NON-CHANGING INFORMATION ABOUT THE INDIVIDUAL, SET AT CREATION/BIRTH
		var userfield1 = Vector.new();
		userfield1.add();		// First element is POPULATION
		userfield1.add();		// Second element is GENERATION (0 for created creatures, non-zero for born creatures)
		userfield1.set(0, i);
		userfield1.set(1, 0);
		newcreature.user1=userfield1;

		// USER FIELD 2 CONTAINS 'PERFORMANCE' INFORMATION, CHANGES DURING LIFETIME, USED FOR ANALYSIS.
		var userfield2 = Vector.new();
		userfield2.add(0.0);		// First element is TOTAL FOOD-ENERGY COLLECTED
		if(newcreature.user1.get(0) == 0)	// For prey, 
		{
		userfield2.add(5);			// Second element is FIGHTS
		}	
		if(newcreature.user1.get(0) == 1)	// For predators, 
		{
		userfield2.add(0);		// Second element is Status (?)
		}
		userfield2.add(0);		// Number of children reproduced.
		newcreature.user2=userfield2;

		// USER FIELD 3 CONTAINS 'STATE' INFORMATION, USED ONLY WITHIN EXPERIMENT DEFINITION
		var userfield3 = Vector.new();
		userfield3.add(-1);		// First element is 'wait for FIGHT'
		userfield3.add(-1);		// Second element is 'wait to MATE'
		newcreature.user3=userfield3;


		// Place the new creature on a random location in the world. See method below.
		place_randomly(newcreature);
	j++;
	}
i++;
}
// Creature populations are now filled with creatures, mutants from the ancestor.
// Food parts will be added and grow step by step.
addfood();
addfood();
}

// >>>>>>>>>> This method is called from onInitExp for initial *created* population
// >>>>>>>>>> and from onBorn for *born* individuals, resulting from mating.
function place_randomly(cr)
{
// Pick random x and y coordinates in the world.
var x=(World.wrldsiz-cr.size_x)*Math.rnd01-cr.size_x/2;
var y=(World.wrldsiz-cr.size_y)*Math.rnd01-cr.size_y/2;

// The z coordinate is not randomly chosen, but determined by creatheight parameter.
var z=WorldMap.getHeight(x,y);
if (World.wrldwat>z) // water here
  {
  if (ExpParams.creath>0)
    z=World.wrldwat+ExpParams.creath;
  else
    z=(1.0+ExpParams.creath)*World.wrldwat - z*ExpParams.creath;
  }
else // land area
  {
  if (ExpParams.creath>0)
    z+=ExpParams.creath;
  }

// After setting the x, y, and z coordinates, place it in this location.
cr.moveAbs(x,y,z-0.999);
return;
}
// <<<<<<<<<<<

// >>>>>>>>>>> This method is automatically called when creature is created in livelibrary.
// >>>>>>>>>>> It simply tries to place creatures randomly in the world, for 20 times.

function onBorn()
{
var retry=20; //retry 20 times
Creature.user2.set(0, 0.0);	// Energy collected is zero, float.
Creature.energy=ExpParams.Energy0; // If creature is of first generation, give starting energy.
while(retry--)
  {
  place_randomly(Creature.*);

	if(ExpParams.aging==0)		// If aging is turned off (set to zero), then set idle energy
   	{
 	Creature.idleen=ExpParams.e_meta;
  	}	 

  if (!LiveLibrary.creatBBCollisions(0))
	return;
  }
  Simulator.message("couldn't avoid collisions!",2);

}

// >>>>>>>> The onStep method is called every step, mainly used for adjusting idle energy levels and adding food.
// >>>>>>>> In some case it is advisable to divide this in population specific onAStep, onBStep en 
// >>>>>>>> onFoodStep methods, but in this case it is more compact in this way.

function onStep()
{

// Adjust idle energy levels of creatures according to their lifespan.
var i=0;
while(i < LiveLibrary.groupcount)	// For the creature populations
{
LiveLibrary.group=i; // Select the i-th population

	var j=0;
   	while(j < CreaturesGroup.creaturecount)	// For every creature j in population i
      	{
      	LiveLibrary.creature=j;	// Select creature j

	// UPDATING WAITING TIME FOR FIGHT AND MATING

	if(Creature.user3.get(0) != -1)			// Userfield 3, first element = waiting for fight
	{
	Creature.user3.set(0, Creature.user3.get(0) + 1);
	if(Creature.user3.get(0)==ExpParams.waitFight) Creature.user3.set( 0, -1);
	}

	if(Creature.user3.get(1) != -1)			// Userfield 3, first element = waiting for fight
	{
	Creature.user3.set(1, Creature.user3.get(0) + 1);
	if(Creature.user3.get(1)==ExpParams.waitMate)Creature.user3.set( 1, -1);
	}
	
	// DISABLE NEURAL NETWORK IS PREY CREATURE HAS 'DIED' IN FIGHT
	// Leave corps in world.

	if(i == 0 && Creature.user2.get(1) == 0 && Creature.nnenabled==1)
	{
	Creature.nnenabled=0;
	Creature.idleen=0;
	Simulator.print("DEATH: PREY, Leaving corps "+Creature.nnenabled);
	}

	// Adjust idle energy by some strange looking function

	if (ExpParams.aging > 0 && Creature.nnenabled == 1)
	{
	Creature.idleen=ExpParams.e_meta * Math.exp((0.069*Creature.lifespan)/ExpParams.aging);
	}
//	Simulator.print("Creature.energy= "+Creature.energy+" Creature.nnenabled= "+Creature.nnenabled);


	// Adjust energy of all food parts (population 2)
	// Food parts grow (gain energy) at constant rate, parameter foodgrowth.
	if(i==2)
	{
		if(Creature.energy < ExpParams.maxfoodenergy)
			Creature.energy=Creature.energy+ExpParams.foodgrowth;
		Creature.getMechPart(0).fr=Creature.energy/50;		// adjust friction of food part according to its energy
		Creature.getMechPart(0).m=0.5+Creature.energy/100;	// adjust mass of food part according to its energy
	}

	j++;
      	}
	

i++;
}


if(foodwait > ExpParams.feedrate && CreaturesGroup.creaturecount < ExpParams.maxfoodparts)
{
addfood();
foodwait=0;
}
foodwait=foodwait+1;

}
// <<<<<<<<

function addfood()
{
LiveLibrary.group=2;
	// if foodgenotype is left unspecified, create default food part
	if (ExpParams.foodgen=="") LiveLibrary.createFromString("//0\nm:Vstyle=food\nm:se="+ExpParams.maxfoodenergy+"\np:");
	else LiveLibrary.createFromString(ExpParams.foodgen);

Creature.energy=1;
Creature.getMechPart(0).m=0.5;
Creature.user1.set(0, 2);
Creature.name="Food";
}

// >>>>>>>> Population specific onCollision methods. These are called at the event of a collision.
// >>>>>>>> Note that the population specific collision mask (colmask) should be set appropriately.
// 

function onFoodCollision()
{
	var cr1 = Collision.Creature1;
	var cr2 = Collision.Creature2;

	if(cr2.user1.get(0)==0 && cr2.nnenabled == 1)	// If food collided with prey creature
	{
	var e=ExpParams.feedtrans;
	//Simulator.print("transferring "+e+" from "+Collision.Creature1.name+" to "+Collision.Creature2.name);
	cr1.energy_m=cr1.energy_m+e;
	cr2.energy_p=cr2.energy_p+e;
	cr2.user2.set(0, cr2.user2.get(0)+e);
//	Simulator.print("Food friction: "+Creature.getMechPart(0).fr);

	}
}


function onPreyCollision()
{
onCreaturesCollision();
}

function onPredatorsCollision()
{
onCreaturesCollision();
}

function onCreaturesCollision()
{
// THREE TYPES OF CREATURE-CREATURE COLLISION:
// 1. Intraspecific: Reproduction
// 2. Interspecific: Fight
// 3. Interspecific: Eat dead corps

//Simulator.print("Collision");
	var cr1 = Collision.Creature1();
	var cr2 = Collision.Creature2();

// IF COLLIDING CREATURE ARE OF THE SAME POPULATION -> TRY REPRODUCTION


if(cr1.user1.get(0) == cr2.user1.get(0))	// Same population
{

	if( cr1!= cr2
	&& cr1.user3.get(1) == -1			&& cr2.user3.get(1) == -1
	&& cr1.energy>=ExpParams.reprEnergy 		&& cr2.energy>=ExpParams.reprEnergy
	&& cr1.lifespan >=ExpParams.reprLifespan 	&& cr2.lifespan >= ExpParams.reprLifespan) 
	{	
		var creaturetype;
		if(cr1.user1.get(0)==0) creaturetype = "prey";
		else creaturetype = "predator";
		Simulator.print("REPRODUCTION: crossing over "+creaturetype);

		var xovchild;
		var mchild;
		var random = Math.rnd01*100.0;

		var geno1 = Geno.newFrom(cr1.genotype, -1, cr1.name, cr1.info);			// Create Geno objects
		var geno2 = Geno.newFrom(cr2.genotype, -1, cr2.name, cr2.info);
									
		xovchild = GenMan.crossOver(geno1, geno2);			// Crossover of the two Geno-objects

		if (ExpParams.p_mut < random)
			// If not mutate, then put crossover in the world
		{
			Simulator.print("CROSSOVER child added");
			LiveLibrary.getGroup(cr1.user1.get(0)).createFromGeno(xovchild);
			addCreatureDetails(Creature.*, cr1, cr2);
		}
		else	// otherwise, put mutant in the world
		{
			Simulator.print("MUTANT child added");
			mchild = GenMan.mutate(xovchild);  		//WAS: xovchild
			LiveLibrary.getGroup(cr1.user1.get(0)).createFromGeno(mchild);
			addCreatureDetails(Creature.*, cr1, cr2);
		}

	}

}

// IF COLLIDING CREATURE ARE OF OTHER POPULATIONS -> FIGHT

else if(   cr1.user1.get(0) != cr2.user1.get(0)			// Different populations
	&& cr1.user1.get(0) != 2	&& cr2.user1.get(0) != 2		// Both non-food
	&& cr1.lifespan>1000		&& cr2.lifespan>1000			// Old enough
	&& cr1.nnenabled == 1		&& cr2.nnenabled == 1)			// And alive.
{
	if(cr1.user3.get(0) == -1 && cr2.user3.get(0) == -1)
	{			
		Simulator.print("FIGHT");

		// NEW IMPLEMENTATION: all fighting costs energy, for both creatures!

		cr1.energy=cr1.energy-50;		// Subtract 100 energy for single fight
		cr2.energy=cr2.energy-50;		// Subtract 100 energy for single fight

		if(cr1.user1.get(0) == 0)	// If prey, subtract 'FIGHTS'
		{
		cr1.user2.set(1,  cr1.user2.get(1)-1);
		}
		if(cr2.user1.get(0) == 0)	// If prey, subtract 'FIGHTS'
		{
		cr2.user2.set(1,  cr2.user2.get(1)-1);
		}
		
		if(cr1.user1.get(0) == 1)	// If predator, add 'STATUS'
		{
		cr1.user2.set(1, cr1.user2.get(1)+1);
		}
		if(cr2.user1.get(0) == 1)	// If prey, add 'STATUS'
		{
		cr2.user2.set(1,  cr2.user2.get(1)+1);
		}

	Simulator.print("FIGHT");

	cr1.user3.set(0, 0);
	cr2.user3.set(0, 0);
	}
}

// ELSE IF PREY CREATURE IS DEAD, EAT CORPS!

else if(  cr1.user1.get(0) != cr2.user1.get(0)					// Different populations
	&& cr1.user1.get(0) != 2	&& cr2.user1.get(0) != 2		// Both non-food
	&& (cr1.nnenabled == 0 || cr2.nnenabled == 0))				// And one of them is dead.
	{	
	var deadcreature;
	var eater;

	// find out which creature is dead
	if(cr1.user1.get(0)==0 && cr1.nnenabled == 0)
	{
	deadcreature = cr1;
	eater = cr2;
	}
	else if(cr2.user1.get(0)==0 && cr2.nnenabled == 0)
	{
	deadcreature = cr2;
	eater = cr1;
	}
	
	var e = ExpParams.feedtranspred;
	deadcreature.energy_m = deadcreature.energy_m + e;
	eater.energy_p = eater.energy_p + e;
	eater.user2.set(1, eater.user2.get(1)+e);
//	Simulator.print("Eating corps: "+e);
	}
}

function addCreatureDetails(cr, p1, p2)
{
	var userfieldone   = Vector.new();	// making temporary vectors
	var userfieldtwo   = Vector.new();
	var userfieldthree = Vector.new();		

	userfieldone.add(p1.user1.get(0));		// Population of child is the same as parent

	if(p1.user1.get(1) <= p2.user1.get(1))		// Generation is one after generation of (newest) parent
  	userfieldone.add(p1.user1.get(1)+1);
	else userfieldone.add(p2.user1.get(1)+1);

	userfieldtwo.add(0.0);		// First element is TOTAL FOOD-ENERGY COLLECTED
	if(userfieldone.get(0) == 0)	// For prey, 
	{
	userfieldtwo.add(10);		// Second element is FIGHTS
	}	
	if(userfieldone.get(0) == 1)	// For predators, 
	{
	userfieldtwo.add(0);		// Second element is Status (?)
	}
	userfieldtwo.add(0);
	
	userfieldthree.add(-1);		// First element is 'wait for FIGHT'
	userfieldthree.add(-1);		// Second element is 'wait to MATE'
			
	cr.user1=userfieldone;	// transfer temporary vectors to real userfields of Creature object
	cr.user2=userfieldtwo;
	cr.user3=userfieldthree;

	// Substract energy from parents, add to child
	cr.energ0=p1.energy/3 + p2.energy/3;			// Suck energy out of parents (one-third of both parents)					
	cr.energy=cr.energ0;
	p1.user2.set(2, p1.user2.get(2)+1);
	p2.user2.set(2, p2.user2.get(2)+1);
	p1.energy=2*p1.energy/3;							// Parents are left with two-third of energy
	p2.energy=2*p2.energy/3;
	p1.user3.set(1, 0);
	p2.user3.set(1, 0);

}


function onKill()
{
if(Creature.user1==2) return; // ignore food parts
GenotypeLibrary.getFromCreature();
Genotype.user1=Creature.user1;
Genotype.user2=Creature.user2;
Genotype.user3=Creature.user3;
Genotype.gnum=Creature.user1.get(1);
//Simulator.print("Creature.user2 = "+Creature.user2+" || Creature.lifespan = "+Creature.lifespan);
if(Creature.user1.get(0)==0) Simulator.print("EATEN: Prey is removed");
else Simulator.print("DEATH: Predator died");
Genotype.num=0; // 0 = it will be filled automatically
GenotypeLibrary.copyGenotype(Creature.user1.get(0));
Genotype.popsiz=0;
GenotypeLibrary.addPerformanceFromCreature();
ExpState.totaltestedcr=ExpState.totaltestedcr+1;
}



function onExpLoad()
{
Simulator.message("not implemented",3);
}

function onExpSave()
{
var i=0;
File.writeComment("'foodchain.expdef' data");
File.writeObject(sim_params.*);
GenotypeLibrary.group=0;
File.writeObject(GenotypeGroup.*);
LiveLibrary.group=0;
File.writeObject(CreaturesGroup.*);
LiveLibrary.group=1;
File.writeObject(CreaturesGroup.*);
GenotypeLibrary.group=0;
while(i < GenotypeGroup.count)
   {
   GenotypeLibrary.genotype=i;
   File.writeNameObject("org",Genotype.*);
   i++;
   }
Simulator.print("Experiment saved ("+GenotypeGroup.count+" genotypes)");
}

function addFood(){}

asm
{
:queryEventNames
push "Place food"
push "Drop food"
return
:onUserEvent
call WorldMap.intersect
if s0,==,0,:onUserEvent_fail
call :addFood
move Creature.size_x,m1
div 2,m1
sub m1,s1
move Creature.size_y,m1
div 2,m1
sub m1,s2
if s6,==,0,:onUserEvent_dontdrop
add 10.0,s3
:onUserEvent_dontdrop
call Creature.moveAbs,s1,s2,s3
:onUserEvent_fail
return
}

~

prop:
id:creath
name:Creation height
type:f -1 50
help:~
Vertical position (above the surface) where new creatures are revived.
Negative values are only used in the water area:
  0   = at the surface
-0.5 = half depth
-1   = just above the bottom~



prop:
id:paramfile
name:Parameter file
type:s
group:

prop:
id:genefile
name:Genotype file
type:s
group:

prop:
id:p_mut
name:Mutated
type:f 0 100
group:Selection

prop:
id:waitFight
name:Waiting time after fight
type:f 0 1000
group:Selection

prop:
id:waitMate
name:Waiting time after mating
type:f 0 1000
group:Selection

prop:
id:numberPrey
name:Size of prey population
type:f 0 50
group:
help:Number of prey created at start-up

prop:
id:numberPred
name:Size of predator population
type:f 0 50
group:
help:Number of predators created at start-up

prop:
id:reprEnergy
name:Reproduction energy
type:f 0 10000
group:Selection
help:~
Creature can produce offspring when its energy level reaches this 
threshold. Note: either this or 'Reproduction Age' must be set on a positive 
value to avoid population explosion.~

prop:
id:reprLifespan
name:Reproduction Age
type:f 0 100000
group:Selection
help:
~Creature can produce offspring when its reaches this lifespan. Note: either 
this or 'Reproduction Energy' must be set on a positive value to avoid 
population exploision.~

prop:
id:Energy0
name:Starting energy
type:f 0 10000
group:Energy
help:Initial energy for the first creature

prop:
id:e_meta
name:Idle metabolism
type:f 0 1
group:Energy
help:Each stick consumes this amount of energy in one time step

prop:
id:feedrate
name:Feeding rate
type:f 0 1000
group:Energy
help:How fast energy is created in the world

prop:
id:feede0
name:Food's starting energy
group:Energy
type:f 0 1000

prop:
id:foodgrowth
name:Food growth rate
group:Energy
type:f 0 10

prop:
id:maxfoodenergy
name:Max energy of food part
group:Energy
type:f 0 1000

prop:
id:maxfoodparts
name:Max number of food parts
group:Energy
type:f 0 500

prop:
id:feedtrans
name:Eating rate
group:Energy
type:f 0 1

prop:
id:feedtranspred
name:Predator eating rate
group:Energy
type:f 0 1


prop:
id:foodgen
name:Food's genotype
group:Energy
type:s 1
help:~
The default food model is a simple, single part object:
  //0
  m:Vstyle=food
  p:
(this genotype is used when you leave this field blank).
You can specify another genotype to create "intelligent" or mobile food.~

prop:
id:aging
name:Aging time
group:Energy
type:d 0 100000
help:Idle metabolism doubles after this period (0 disables aging)


prop:
id:autorestart
name:Restart after extinction
group:
help:Restarts automatically this experiment after the last creature dies
type:d 0 1

state:
id:notes
name:Notes
type:s 1
help:~
You can write anything here
(it will be written to the experiment file)~

state:
id:totaltestedcr
name:Evaluated creatures
help:Total number of the creatures evaluated in the experiment
type:d
flags:16
